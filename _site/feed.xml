<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">xeolabs</title>
<subtitle type="text">On the other side of the screen, it all looks so easy</subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://xeolabs.com/feed.xml" />
<link rel="alternate" type="text/html" href="http://xeolabs.com" />
<updated>2019-05-02T22:28:23+00:00</updated>
<id>http://xeolabs.com/</id>
<author>
  <name>xeolabs</name>
  <uri>http://xeolabs.com/</uri>
  <email>lindsay.kay@xeolabs.com</email>
</author>


<entry>
  <title type="html"><![CDATA[xeokit - 3D SDK for Web-based BIM and CAD]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/xeokit" />
  <id>http://xeolabs.com/portfolio/xeokit</id>
  <updated>2019-08-02T00:00:00-00:00</updated>
  <published>2019-02-08T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/xeokit&quot;&gt;xeokit - 3D SDK for Web-based BIM and CAD&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on February 08, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[The BioDigital Human™]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/biodigital-human" />
  <id>http://xeolabs.com/portfolio/biodigital-human</id>
  <updated>2018-23-03T00:00:00-00:00</updated>
  <published>2018-06-29T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;p&gt;Since 2009 I’ve worked remotely from Berlin, Germany with the team at &lt;a href=&quot;http://biodigital.com&quot;&gt;BioDigital Systems&lt;/a&gt; in Manhattan, New York, to help develop
and maintain the &lt;a href=&quot;http://biodigitalhuman.com&quot;&gt;BioDigital Human&lt;/a&gt; anatomy visualization platform and its public developer API.
&lt;br /&gt;&lt;br /&gt;
We developed the Human on &lt;strong&gt;&lt;a href=&quot;http://scenejs.org&quot;&gt;SceneJS&lt;/a&gt;&lt;/strong&gt;, an open source WebGL library I created for developing 3D graphics applications 
in Web browsers without using plugins. One of the first WebGL engines, SceneJS evolved alongside the WebGL specification, before 
we eventually made a private version which we adapted specifically for the Human. 
&lt;br /&gt;&lt;br /&gt;
In this article, I’m going to describe SceneJS’ journey from a weekend side  project to how we applied it within BioDigital’s 
Web-based anatomy visualization platform. Ten years down the track, the platform now has over three million 
registered users and continues to develop, with a growing library of models of anatomy and physical conditions.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
	&lt;a href=&quot;http://biodigitalhuman.com&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/human/biodigital-human-platform.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#2005--scenejs-origins&quot;&gt;2005: SceneJS Origins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2006--experiments-with-canvas3d&quot;&gt;2006: Experiments with Canvas3D&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2008--scenejs-open-sourced&quot;&gt;2008: SceneJS Open Sourced&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2009--scenejs-powering-the-biodigital-human&quot;&gt;2009: SceneJS Powering the BioDigital Human&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#human-content-pipeline-origins&quot;&gt;Human Content Pipeline Origins&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#human-developer-api-origins&quot;&gt;Human Developer API Origins&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#using-the-developer-api&quot;&gt;Using the Developer API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#api-demo--lockheed-martin-ice-storm-integration&quot;&gt;API Demo: Lockheed-Martin ICE STORM Integration&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#smiletrain-virtual-surgery-simulator&quot;&gt;Smiletrain Virtual Surgery Simulator&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2015--scenejs-private-fork&quot;&gt;2015: SceneJS Private Fork&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#scenejs-presentations&quot;&gt;SceneJS Presentations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#next-steps--xeogl&quot;&gt;Next Steps: xeogl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#acknowledgements&quot;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- &gt; * [scenejs.org](http://scenejs.org) --&gt;
&lt;!-- &gt; * [biodigitalhuman.com](http://biodigitalhuman.com) --&gt;
&lt;!-- &gt; * [Slides from my talk at the Berlin WebGL Meetup](http://slides.com/xeolabs/deck) --&gt;
&lt;!-- &gt; * [SceneJS in OpenGL Insights 2012](http://127.0.0.1:4000/pdfs/OpenGLInsights.pdf) --&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;scenejs-origins&quot;&gt;2005: SceneJS Origins&lt;/h1&gt;

&lt;p&gt;I started SceneJS as a weekend experiment, somewhere around late 2005. Back then, JavaScript wasn’t so fast and friends 
like &lt;a href=&quot;https://twitter.com/ohunt?lang=en&quot;&gt;@ohunt&lt;/a&gt; were busy writing raytracers on JavaScript that took forever, 
as a kind of twisted browser-cooking exercise.&lt;br /&gt;&lt;br /&gt;The first version of SceneJS even rendered wireframe as DIV elements, arranged 
using &lt;a href=&quot;https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm&quot;&gt;Bresenham’s line algorithm&lt;/a&gt;, so I wasn’t expecting 
that to be particularly interactive.
&lt;br /&gt;&lt;br /&gt;
That early version was even written in completely functional-style JavaScript, and did a ton of garbage collection and scope traversal. I was 
inspired at the time by LISP and CLOJURE and so perhaps took my fascination with terse scene definitions a little too far!&lt;/p&gt;

&lt;h1 id=&quot;experiments-with-canvas3d&quot;&gt;2006: Experiments with Canvas3D&lt;/h1&gt;

&lt;p&gt;Web-based 3D without plugins actually started to look viable in 2006, however, with the Canvas 3D experiments started by &lt;a href=&quot;https://en.wikipedia.org/wiki/Vladimir_Vuki%C4%87evi%C4%87&quot;&gt;Vladimir Vukićević&lt;/a&gt; at Mozilla, and by the end of 
2007, both Mozilla and Opera had made their own separate implementations. Suddenly, interactive 3D in the browser didn’t 
seem so crazy, so I switched SceneJS over to using Canvas3D. 
&lt;br /&gt;&lt;br /&gt;
Following tradition, my first SceneJS demo 
was, of course, a &lt;a href=&quot;https://en.wikipedia.org/wiki/Gouraud_shading&quot;&gt;Gouraud-shaded&lt;/a&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Utah_teapot&quot;&gt;Utah Teapot&lt;/a&gt;, a bit like this one:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=firstExample&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/firstExample.png&quot; alt=&quot;SceneJS First Example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rotate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myRotate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/teapot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myTeapot&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myRotate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;incRotateX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I loved the idea of a 3D world defined declaratively, as pure data. At this point, I was inspired by the likes 
of &lt;a href=&quot;https://en.wikipedia.org/wiki/VRML&quot;&gt;VRML&lt;/a&gt;, which I’d used as a student to visualize data, and by the terse, declarative 
syntax of &lt;a href=&quot;https://en.wikipedia.org/wiki/JavaFX&quot;&gt;JavaFX&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;scenejs-open-sourced&quot;&gt;2008: SceneJS Open Sourced&lt;/h1&gt;

&lt;p&gt;My day job back in 2008 (in a cubicle, maintaining a Java-based spam-scrubbing platform) just wasn’t firing my creative circuits. I needed to get back in
 touch with the creative culture that drew me into programming in the first place: 3D graphics, SIGGRAPH journals, cyberpunk 
 science fiction - all that good stuff.
&lt;br /&gt;&lt;br /&gt;
So I quit my job, &lt;a href=&quot;https://github.com/xeolabs/scenejs&quot;&gt;put SceneJS on GitHub&lt;/a&gt;, and devoted my time to getting 
 back into 3D programming, using WebGL.&lt;/p&gt;

&lt;h1 id=&quot;scenejs-powering-the-biodigital-human&quot;&gt;2009: SceneJS Powering the BioDigital Human&lt;/h1&gt;

&lt;p&gt;A little while later, I signed up with BioDigital Systems and we began developing the &lt;a href=&quot;http://biodigitalhuman.com&quot;&gt;BioDigital Human&lt;/a&gt; on SceneJS.&lt;/p&gt;

&lt;h3 id=&quot;human-content-pipeline-origins&quot;&gt;Human Content Pipeline Origins&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/phaeta&quot;&gt;Brandon Smith&lt;/a&gt; (AKA “The Wizard”) began by exporting one of 
BioDigital’s models of the human skeletal system to COLLADA, which I then imported into SceneJS using an experimental open 
source &lt;a href=&quot;https://github.com/xeolabs/scenejs-asset-server&quot;&gt;SceneJS asset server&lt;/a&gt; I’d been working on. 
&lt;br /&gt;&lt;br /&gt;
The 206 bones within that model rendered at a promising rate of around ~20FPS, so we took a gamble on WebGL and so the BioDigital flagship app was born.
&lt;br /&gt;&lt;br /&gt;
Our biggest challenge was getting the platform to work reliably across the various operating systems, browsers and GPUs, 
and so the next few years involved navigating patchy GPU support and a lot of “Aw Snap”. We owe a lot to the work of 
the &lt;a href=&quot;https://en.wikipedia.org/wiki/ANGLE_(software)&quot;&gt;ANGLE&lt;/a&gt; developers, whose work allows full hardware acceleration on 
Windows without relying on OpenGL graphics drivers.
&lt;br /&gt;&lt;br /&gt;
Over the next couple of years I rewrote SceneJS twice, and we managed to double that performance. &lt;a href=&quot;https://twitter.com/oletus?lang=en&quot;&gt;Olli Etuaho&lt;/a&gt; from NVIDIA even helped 
out and made optimizations for mobile GPUs, and later, after we’d made a private fork (described below), we got it rendering 
at ~60FPS for most of the full anatomy model.&lt;/p&gt;

&lt;h3 id=&quot;human-developer-api-origins&quot;&gt;Human Developer API Origins&lt;/h3&gt;

&lt;p&gt;Before Human, I’d also done some open source experiments with controlling SceneJS via a JSON-RPC message protocol, and we used those 
to get started with our &lt;a href=&quot;https://developer.biodigital.com/&quot;&gt;developer API&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
Some of those experiments were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/xeolabs/xeoEngine-experiment&quot;&gt;xeoEngine-experiment&lt;/a&gt;&lt;/strong&gt; which allows you to control SceneJS via JSON-RPC,&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/xeolabs/actorjs&quot;&gt;actorjs&lt;/a&gt;&lt;/strong&gt; which allows you to define and update &lt;em&gt;actor&lt;/em&gt; components via JSON-RPC, and&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/xeolabs/scenejs-grid&quot;&gt;scenejs-grid&lt;/a&gt;&lt;/strong&gt; which applies the actor and JSON-RPC concepts on SceneJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are now archived projects, but were useful for determining the best way to control a Human within an 
IFRAME embedded in a 3rd-party container page.
&lt;br /&gt;&lt;br /&gt;
One of my inspirations for JSON-RPC was the messaging system that &lt;a href=&quot;https://twitter.com/super_eggbert&quot;&gt;Paul Brunt&lt;/a&gt; had built into his WebGL-based &lt;a href=&quot;http://www.glge.org&quot;&gt;GLGE&lt;/a&gt; engine.&lt;/p&gt;

&lt;h3 id=&quot;using-the-developer-api&quot;&gt;Using the Developer API&lt;/h3&gt;

&lt;p&gt;To use the API, start by embeding the Human Widget in your page. In the example below, we’ll use the cochlear implant model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 100%; overflow: hidden;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;height: 100%; margin: 0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myWidget&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://human.biodigital.com/widget/?m=cochlear_implant&amp;amp;dk=&amp;lt;YOUR-DEVELOPER-KEY&amp;gt;&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://developer.biodigital.com/builds/api/2/human-api.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we’ll create an instance of the Human API:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HumanAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myWidget&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Through the API, we can now make the widget do things like set the position of the camera etc:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;camera.orbit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For more info on what’s possible with the API, sign up with Human and check out the tutorials at &lt;a href=&quot;https://developer.biodigital.com/&quot;&gt;developer.biodigital.com&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;api-demo-lockheed-martin-ice-storm-integration&quot;&gt;API Demo: Lockheed-Martin ICE STORM Integration&lt;/h3&gt;
&lt;p&gt;We used the API for various presentations. For one presentation, we used it to interface the Human with the Lockheed Martin 
ICE STORM ICU Simulator, so that changes to the patient’s heartbeat and respiration within the simulator were rendered as 
morph animations within the Human:&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;http://xeolabs.com/images/human/icestorm.jpg&quot; /&gt;
	&lt;figcaption&gt;Human interfaced with the Lockheed Martin ICE STORM ICU Simulator. Human (on the right) is animating the 
	heart and lungs using morph targets, synchronized via JSON-RPC with changes to the patient&#39;s condition in the ICE STORM ICU simulator (on the left).&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;smiletrain-virtual-surgery-simulator&quot;&gt;Smiletrain Virtual Surgery Simulator&lt;/h3&gt;

&lt;p&gt;The Human is a platform on which we can build applications. One of the most rewarding of those was the WebGL-based SmileTrain 
Surgical Cleft Repair Simulator.
&lt;br /&gt;&lt;br /&gt;
We based the Smiletrain Simulator on &lt;a href=&quot;https://www.linkedin.com/in/aaron-oliker-544a6a2/&quot;&gt;Aaron Oliker’s&lt;/a&gt; 
earlier C++ version, which he implemented on OpenSceneGraph.&lt;/p&gt;

&lt;figure&gt;
	&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/fPNOXnzaiJ0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;figcaption&gt;&lt;a href=&quot;https://www.smiletrain.org/&quot; title=&quot;SceneJS powering the BioDigital Human&quot;&gt;The Smiletrain Surgical Simulator is built on the BioDigital Human and assists healthcare professionals in developing countries with learning cleft repair procedures.&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
That slick Darth Vader Approved UI you’re seeing in Human and Smiletrain is the work of BioDigital front-end engineers Kathia Yau and Avinash Chan.&lt;/p&gt;

&lt;h3 id=&quot;scenejs-private-fork&quot;&gt;2015: SceneJS Private Fork&lt;/h3&gt;

&lt;p&gt;In 2015, with the company expanding, &lt;a href=&quot;https://twitter.com/thsherif&quot;&gt;Tarek Sherif&lt;/a&gt; took over my role as 3D programming lead, since it made 
 sense for that job to be a performed on-site by a non-virtual person who could chase people around the office, instead of 
 typing emails all night in the wrong time zone.
&lt;br /&gt;&lt;br /&gt; 
Throwing the git pull requests back and forth, we then added many more features to Human and SceneJS, including a streaming asset 
server, physically-based rendering (PBR), geometry and texture compression, particle systems and an improved post-effects pipeline.
&lt;br /&gt;&lt;br /&gt;
For the post-effects support, Tarek built an extensible plugin-based architecture based off his own open source WebGL engine, &lt;a href=&quot;https://tsherif.github.io/picogl.js/&quot;&gt;PicoGL&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;scenejs-presentations&quot;&gt;SceneJS Presentations&lt;/h1&gt;

&lt;p&gt;Along the way, I got to write about SceneJS and present it to fellow graphics nerds:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wrote a chapter about SceneJS in &lt;em&gt;OpenGL Insights&lt;/em&gt; 2012, which you can now &lt;a href=&quot;http://127.0.0.1:4000/pdfs/OpenGLInsights.pdf&quot;&gt;download for free&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Talked about SceneJS at the 2015 Berlin WebGL Meetup - &lt;a href=&quot;http://slides.com/xeolabs/deck&quot;&gt;here are the slides&lt;/a&gt; from that talk, with a few embedded live demos.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;next-steps-xeogl&quot;&gt;Next Steps: xeogl&lt;/h1&gt;

&lt;p&gt;I’m going to keep making more of these WebGL engines, because there’s never a one-size-fit-all solution (and well, it is a 
bit of a creative compulsion).
&lt;br /&gt;&lt;br /&gt;
The public fork of SceneJS is now archived and no longer under development. However, if you’re looking for a production-proven 
WebGL-based 3D engine which is currently used in several commercial IFC and CAD viewers, you might find my latest engine useful: &lt;a href=&quot;http://xeogl.org&quot;&gt;http://xeogl.org&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Vladimir_Vuki%C4%87evi%C4%87&quot;&gt;Vladimir Vukevic&lt;/a&gt; for kicking WebGL off with his Canvas3D experiments,&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;https://www.khronos.org/&quot;&gt;Khronos WebGL Working Group&lt;/a&gt; for overseeing the development of the WebGL specification,&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;https://chromium.googlesource.com/angle/angle/+/master/README.md&quot;&gt;ANGLE developers&lt;/a&gt; for making WebGL work on DirectX,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.khronos.org/collada/&quot;&gt;COLLADA™&lt;/a&gt; for the file format that got us started with the Human (and taught me a lot about what goes into a 3D engine),&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.paulbrunt.co.uk/#/&quot;&gt;Paul Brunt&lt;/a&gt; for his pioneering open source WebGL-based &lt;a href=&quot;http://www.glge.org/&quot;&gt;GLGE&lt;/a&gt; engine, which was like a living textbook on graphics algorithms on JavaScript,&lt;/li&gt;
  &lt;li&gt;the &lt;a href=&quot;https://www.zygotebody.com/&quot;&gt;Zygote Body&lt;/a&gt;, which was originally created as the Google Body by &lt;a href=&quot;https://twitter.com/won3d?lang=en&quot;&gt;Won Chun&lt;/a&gt;, as his 20% experiment at Google,&lt;/li&gt;
  &lt;li&gt;the SceneJS community for a crash course on what a 3D engine is, and&lt;/li&gt;
  &lt;li&gt;the model creation team at BioDigital for creating all the cool content that makes the platform shine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won’t try to mention the whole BioDigital team here because I might miss someone, but I’ll give shouts out to our interns, such 
as &lt;a href=&quot;https://www.linkedin.com/in/jacqueline-chu-7a532558&quot;&gt;Jacqueline Chu&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/shrekshao&quot;&gt;Shuai Shao&lt;/a&gt; (AKA ShrekShao), 
who came in fresh from academia and added many valuable rendering features. 
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/biodigital-human&quot;&gt;The BioDigital Human™&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on June 29, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[BIMData™ Online 3D BIM Viewer]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/bimdata" />
  <id>http://xeolabs.com/portfolio/bimdata</id>
  <updated>2018-19-09T00:00:00-00:00</updated>
  <published>2018-06-28T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;p&gt;In 2018, I worked remotely with the &lt;strong&gt;&lt;a href=&quot;https://www.bimdata.io/fr/la-team/&quot;&gt;BIMData development team&lt;/a&gt;&lt;/strong&gt; in Lyon, France, to develop the WebGL-based 3D viewer
component of the BIMData online building information modeling (BIM) platform.
&lt;br /&gt;&lt;br /&gt;
We developed the viewer on &lt;strong&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;&lt;/strong&gt;, an open source WebGL library I created for developing 
3D model visualization applications in Web browsers without using plugins.
&lt;br /&gt;&lt;br /&gt;
In this article, I’ll describe some of the features that I implemented within the viewer.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.bimdata.io/en/bim-data-en/&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/bimdata/bimdata.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-client&quot;&gt;The Client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution&quot;&gt;Solution&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#using-xeogl&quot;&gt;Using xeogl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#sub-contracting&quot;&gt;Sub-contracting&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#application-architecture&quot;&gt;Application architecture&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gltf-geometry-pipeline&quot;&gt;glTF geometry pipeline&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#geometry-compression-and-batching&quot;&gt;Geometry compression and batching&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#user-annotations&quot;&gt;User annotations&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cross-section-views&quot;&gt;Cross-section views&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#viewcube-camera-controller&quot;&gt;ViewCube camera controller&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#isolated-object-view&quot;&gt;Isolated object view&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#emphasis-effects&quot;&gt;Emphasis effects&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#measurement-tools&quot;&gt;Measurement tools&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#simple-distance&quot;&gt;Simple distance&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#camera-navigation&quot;&gt;Camera navigation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bcf&quot;&gt;BCF&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;BIM&lt;/strong&gt; is a process involving the generation and management of digital representations of physical and functional characteristics 
of buildings, usually while constructing them.
&lt;br /&gt;&lt;br /&gt; 
&lt;strong&gt;WebGL&lt;/strong&gt; is is a JavaScript API for rendering interactive 2D and 3D graphics within any compatible web browser, without 
the use of plug-ins. While IFC viewers are typically written as desktop applications, using the likes of OpenGL or DirectX, writing them
 on WebGL gives us the advantage of being able to view them on the web. 
 &lt;br /&gt;&lt;br /&gt;
 With IFC visualization, the main challenge is how to engineer a WebGL-based viewer that’s able to render huge quantities 
 of objects within the memory and execution constraints of the browser. After all, IFC models often contain an individual 
 element for every single fire sprinkler, electrical fitting, light panel, and so on.&lt;/p&gt;

&lt;h1 id=&quot;the-client&quot;&gt;The Client&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.bimdata.io/en/bim-data-en/&quot;&gt;BIMData&lt;/a&gt;&lt;/strong&gt; is a company in Lyon, France that provides a cutting-edge online 
BIM platform to manage your construction projects, including an all-in-one solution to visualize, check, edit and share 
building information.
&lt;br /&gt;&lt;br /&gt;
One of the coolest things about this platform is that it’s continuously up-to-date with the latest
version of IFC (IFC2x3, IFC4 and IFC4.1).&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Implement a WebGL-based viewer in JavaScript, to view large 3D IFC models in Web browsers, without plugins&lt;/li&gt;
  &lt;li&gt;Load IFC models from glTF&lt;/li&gt;
  &lt;li&gt;Emphasise and reveal objects using ghosting, wireframing and highlighting&lt;/li&gt;
  &lt;li&gt;Ability to annotate models with 3D labels&lt;/li&gt;
  &lt;li&gt;Cross section views&lt;/li&gt;
  &lt;li&gt;Isolated object views&lt;/li&gt;
  &lt;li&gt;Measurement tools, to find areas and distances within models&lt;/li&gt;
  &lt;li&gt;A camera navigation gizmo similar to AutoDesk ViewCube&lt;/li&gt;
  &lt;li&gt;Orbit, first-person and walk-through navigation modes&lt;/li&gt;
  &lt;li&gt;Ability to capture and share views via BCF format&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;h3 id=&quot;using-xeogl&quot;&gt;Using xeogl&lt;/h3&gt;

&lt;p&gt;I implemented the BIMData viewer as a wrapper around &lt;strong&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;&lt;/strong&gt;, which is an open source library I created for WebGL-based visualization.
 &lt;br /&gt;&lt;br /&gt;
 xeogl is also used in other commercial projects and is starting to receive contributions from other developers. This means 
 that improvements and optimizations that we make to xeogl for those projects will also benefit the BIMData platform.
 &lt;br /&gt;&lt;br /&gt;
Being geared to engineering visualization, xeogl supports many of this project’s requirements out-of-the-box. For the more 
  application-specific requirements, I extended it with proprietary components, for things like custom camera 
  controls and interaction widgets.&lt;/p&gt;

&lt;h3 id=&quot;sub-contracting&quot;&gt;Sub-contracting&lt;/h3&gt;

&lt;p&gt;For this job I sub-contracted &lt;a href=&quot;http://www.derschmale.com/&quot;&gt;David Lenaerts&lt;/a&gt;, a freelance graphics programmer, to help out with 
the math for 3D gizmo interactions. I’d recommend David to any developer who needs help with their WebGL projects.&lt;/p&gt;

&lt;h3 id=&quot;application-architecture&quot;&gt;Application architecture&lt;/h3&gt;

&lt;p&gt;Our viewer is a facade class that wraps xeogl in a set of application-specific functions, with a plugin architecture 
 into which we can incrementally add tools and gizmos.
 &lt;br /&gt;&lt;br /&gt;
 &lt;img src=&quot;http://xeolabs.com/images/bimdata/uml.png&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
This plugin architecture enabled us to deploy the core functionality of the viewer as soon as it was ready, then deploy 
 various tools and gizmos incrementally, as we developed them.&lt;/p&gt;

&lt;h3 id=&quot;gltf-geometry-pipeline&quot;&gt;glTF geometry pipeline&lt;/h3&gt;

&lt;p&gt;We’re using &lt;a href=&quot;https://www.khronos.org/gltf/&quot;&gt;glTF&lt;/a&gt; as the file format for our IFC models.  Within the viewer, we’re 
loading glTF into the 3D scene using xeogl’s &lt;a href=&quot;http://xeogl.org/docs/classes/GLTFModel.html&quot;&gt;GLTFModel&lt;/a&gt; components.&lt;/p&gt;

&lt;h4 id=&quot;geometry-compression-and-batching&quot;&gt;Geometry compression and batching&lt;/h4&gt;

&lt;p&gt;glTF gives us options for geometry compression, such as attribute quantization, in which floating-point geometry arrays are 
compressed into integers, then decompressed on-the-fly within the WebGL vertex shader. This gives us smaller glTF files, a smaller 
viewer memory footprint and reduced usage of GPU bandwidth. 
&lt;br /&gt;&lt;br /&gt;
When the glTF geometry is not quantized, then xeogl automatically quantizes it while loading. At the same time, xeogl also 
automatically combines geometries from multiple objects into the same vertex buffer objects (VBOs), in order to reduce the number of 
VBO binds per frame. This enables us to render models up to around 200k+ objects.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For the next version of xeogl (v0.9), I’m currently adding geometry batching in combination with 
instancing (using the ANGLE_instanced_arrays extension), which will enable BIMData to load millions of objects.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;information-manager&quot;&gt;Information Manager&lt;/h3&gt;

&lt;p&gt;The BIMData platform is a complete information management platform that’s able to provide specific
information about any model elements that you select within the 3D view.
&lt;br /&gt;&lt;br /&gt;
Within the viewer, I integrated xeogl’s picking mechanism to get the ID of any object that you click on,
which the information manager UI then uses to populate itself from the model’s IFC data.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/infoManager.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;user-annotations&quot;&gt;User annotations&lt;/h3&gt;

&lt;p&gt;Annotations are notes that users pin to the surface of models. Our annotations are based on xeogl’s experimental 
&lt;a href=&quot;http://xeogl.org/docs/classes/Annotation.html&quot;&gt;Annotation&lt;/a&gt; components. 
&lt;br /&gt;&lt;br /&gt;
These are able to automatically hide themselves whenever something else occludes them in the 3D view. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/annotations.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cross-section-views&quot;&gt;Cross-section views&lt;/h3&gt;

&lt;p&gt;Our users can create an unlimited number of cross-section planes, which they can arrange using mouse and touch input.
&lt;br /&gt;&lt;br /&gt;
Under the hood, our cross-section planes use xeogl’s &lt;a href=&quot;http://xeogl.org/docs/classes/Clip.html&quot;&gt;Clip&lt;/a&gt; components, 
which users can interactively arrange using our fancy repositioning gizmo. That was one of the bits 
that &lt;a href=&quot;http://www.derschmale.com/&quot;&gt;David Lenaerts&lt;/a&gt; helped out with.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/clipping.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewcube-camera-controller&quot;&gt;ViewCube camera controller&lt;/h3&gt;

&lt;p&gt;Our &lt;em&gt;ViewCube&lt;/em&gt; is a 3D camera orientation indicator and controller, which works the same as the 
one by Autodesk Research. Ours is a 3D gizmo I implemented on xeogl, with clickable hotspots that fly the camera 
to various vantage points. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/viewCube.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;isolated-object-view&quot;&gt;Isolated object view&lt;/h3&gt;

&lt;p&gt;WIP&lt;/p&gt;

&lt;h3 id=&quot;emphasis-effects&quot;&gt;Emphasis effects&lt;/h3&gt;

&lt;p&gt;xeogl has some built-in emphasis effects, such as ghosting and wireframe. We’re using those for highlighting and 
revealing BIM objects. 
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/highlight.gif&quot; alt=&quot;&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;
Edge emphasis and ghosting effects for X-ray view:
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/ghosting.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;measurement-tools&quot;&gt;Measurement tools&lt;/h3&gt;

&lt;p&gt;Our viewer has a bunch of tools to measure distances, angles and areas.&lt;/p&gt;

&lt;h4 id=&quot;simple-distance&quot;&gt;Simple distance&lt;/h4&gt;

&lt;p&gt;Using the distance measurement tool, users can select a pair of points on the surfaces of objects and get the direct 
distance between them, as well as the distance on each of the X,Y and Z axis individually. Under the hood, this tool 
uses xeogl’s 3D picking mechanism, while the distance tool itself is rendered using HTML elements layered over the WebGL canvas.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/bimdata/measureDistance.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;camera-navigation&quot;&gt;Camera navigation&lt;/h3&gt;

&lt;p&gt;Camera navigation uses a custom xeogl component that allows users to control the camera with mouse and touch input. With our 
 navigation component, users can orbit a point-of-interest, fly to selected objects, navigate in first-person mode, and “walk” 
 to a point that they click on.&lt;/p&gt;

&lt;p&gt;TODO: animated gif&lt;/p&gt;

&lt;h3 id=&quot;bcf&quot;&gt;BCF&lt;/h3&gt;

&lt;p&gt;The BIM Collaboration Format (BCF) is an open file format that supports workflow communication in BIM processes.
&lt;br /&gt;&lt;br /&gt;
Our BCF system captures the complete visual state of the viewer as a JSON BCF record, that contains all the 
relevant viewer state, such as object visibilities and emphasis appearance, camera position, cross-section planes, 
annotations, as well as PNG snapshot image of the canvas.
&lt;br /&gt;&lt;br /&gt;
Users can capture a BCF record of the viewer state, to indicate an issue within a model, then share that with other users, 
 who can then load that view to see what the problem is.
&lt;br /&gt;&lt;br /&gt;
 &lt;img src=&quot;http://xeolabs.com/images/bimdata/bcf.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/bimdata&quot;&gt;BIMData™ Online 3D BIM Viewer&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on June 28, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[BIMSurfer Online BIM Viewer]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/xeogl-in-bimsurfer" />
  <id>http://xeolabs.com/portfolio/xeogl-in-bimsurfer</id>
  <updated>2018-23-03T00:00:00-00:00</updated>
  <published>2018-06-27T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bimsurfer-requirements&quot; id=&quot;markdown-toc-bimsurfer-requirements&quot;&gt;BIMSurfer requirements&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#responsiveness&quot; id=&quot;markdown-toc-responsiveness&quot;&gt;Responsiveness&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#future-extensions&quot; id=&quot;markdown-toc-future-extensions&quot;&gt;Future extensions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#want-to-help-out&quot; id=&quot;markdown-toc-want-to-help-out&quot;&gt;Want to help out?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;Last week I integrated the latest build of &lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt; into &lt;a href=&quot;http://bimsurfer.org&quot;&gt;BIMSurfer&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;xeogl is an 
 open source WebGL-based 3D visualization engine I’ve been working on, and BIMSurfer is an open source tool 
 for Web-based visualization and evaluation of Building Information Models (BIM). 
 &lt;br /&gt;&lt;br /&gt;
 Here’s my first post on my adventures with xeogl and BIMSurfer.
 &lt;br /&gt;&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/tCHwEA2HqU8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://opensourcebim.github.io/BIMsurfer/&quot;&gt;Run some live demos here&lt;/a&gt; - try the links at the top of the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;First, a little history. BIMSurfer’s WebGL-based 3D viewer has been through a few evolutions, so it’s been a tag-team 
 effort in which each evolution has built upon lessons learned from the previous ones. 
 &lt;br /&gt;&lt;br /&gt;
 &lt;a href=&quot;https://twitter.com/RehnoLindeque&quot;&gt;Rehno Lindeque&lt;/a&gt; kicked things off 
 with the first version in 2011, which he implemented as a facade object wrapping a &lt;a href=&quot;http://scenejs.org&quot;&gt;SceneJS&lt;/a&gt; scene graph.
  &lt;a href=&quot;robert.zach@tuwien.ac.at&quot;&gt;Robert Zach&lt;/a&gt;, &lt;a href=&quot;mailchriska@gmail.com&quot;&gt;Kaltenriner Christoph&lt;/a&gt; 
 and &lt;a href=&quot;leichtfried.michael@gmail.com&quot;&gt;Leichtfried Michael&lt;/a&gt; from TU Vienna then added more enhancements in 2012. 
 &lt;br /&gt;&lt;br /&gt;
 &lt;a href=&quot;https://twitter.com/bryandenijs&quot;&gt;Bryan de Nijs&lt;/a&gt; wrote the next version in 2014, again on SceneJS, but this time as a 
 collection of pluggable components that wrapped portions of the underlying SceneJS scene graph.
 &lt;br /&gt;&lt;br /&gt;
 Bryan handed the viewer over to me in 2015. Looking at Bryan’s design, I realised that, for applications like BIMSurfer, 
  the underlying WebGL engine should ideally have an object-component-based API. And so this is how xeogl came about - initially 
  as a bunch of components wrapping SceneJS, then later as a completely new component-based WebGL engine, stripped down 
  to the bare essentials for fast CAD-like visualization. &lt;br /&gt;
 &lt;br /&gt;
 Behind the scenes all this time, there is &lt;a href=&quot;http://bimserver.org/&quot;&gt;BIMServer&lt;/a&gt;, which serves IFC models to BIMSurfer as 
 binary streams over WebSockets. The principle developers of BIMServer are &lt;a href=&quot;https://github.com/aothms&quot;&gt;Thomas Krijnen&lt;/a&gt; (who also handles various UI elements), &lt;a href=&quot;https://github.com/rubendel&quot;&gt;Ruben de Laat&lt;/a&gt; and &lt;a href=&quot;https://github.com/berlotti&quot;&gt;Leon van Berlo&lt;/a&gt; (who is also overall project leader).&lt;/p&gt;

&lt;h2 id=&quot;bimsurfer-requirements&quot;&gt;BIMSurfer requirements&lt;/h2&gt;

&lt;p&gt;BIMSurfer has certain requirements which have shaped xeogl, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;fast rendering of &lt;a href=&quot;http://xeogl.org/examples/#profiling_statistics&quot;&gt;large numbers of independently transformed geometries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;efficient queries for boundaries of things, so that we can &lt;a href=&quot;http://xeogl.org/examples/#animation_camera_flight&quot;&gt;fly the camera to look at them&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;extensible camera animation and control components, like &lt;a href=&quot;http://xeogl.org/examples/#interaction_camera_BIMCameraControl&quot;&gt;xeogl.BIMCameraControl&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;responsiveness&quot;&gt;Responsiveness&lt;/h3&gt;

&lt;p&gt;To keep applications like BIMSurfer from locking up while loading monstrous amounts of content, xeogl defers all scene updates (eg. creation of 
scene objects, generation of geometries, shader allocations, matrix updates etc) to a FIFO task queue, then executes 
a few tasks from the queue before it renders each frame. 
&lt;br /&gt;&lt;br /&gt;
By amortizing the cost of updates across many frames like this, xeogl also prevents WebGL from freaking out and thinking 
that it’s running on a potato, which may cause it to lock FPS down to a lower rate.
&lt;br /&gt;&lt;br /&gt;In the screen capture above, we’re loading a test model containing around 3500 objects. While those are loading, 
we can still show and hide things, rotate the model, and so forth. In future we may end up choosing to intentionally 
throttle the FPS while loading, just to get the initial loading out of the way as quickly as possible, but this technique 
is still potentially useful for keeping things snappy while dynamically loading content.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
I learned this technique from the excellent article &lt;em&gt;Rendering Optimizations in 
the Turbulenz Engine&lt;/em&gt; by &lt;a href=&quot;https://twitter.com/davidgaleano&quot;&gt;David Galeano&lt;/a&gt;, which you can read 
in &lt;a href=&quot;https://www.amazon.com/WebGL-Insights-Patrick-Cozzi/dp/1498716075&quot;&gt;WebGL Insights&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;future-extensions&quot;&gt;Future extensions&lt;/h2&gt;

&lt;p&gt;An advantage of using an open source 3D engine within an app like BIMSurfer is that all enhancements made to the engine 
 are then automatically available within the app. 
&lt;br /&gt;&lt;br /&gt;
xeogl has a growing library of plugin components that we can drop into our apps 
 to add more functionality. I’m not sure exactly how many of these currently overlap with BIMSurfer’s roadmap, but 
 there are a few xeogl components already that might be useful in BIMSurfer at some point:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/GLTFModel.html&quot;&gt;xeogl.GLTFModel&lt;/a&gt; loads models from glTF,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceEffect.html&quot;&gt;xeogl.ZSpaceEffect&lt;/a&gt; renders scenes on zSpace VR displays,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/CameraPathAnimation.html&quot;&gt;xeogl.CameraPathAnimation&lt;/a&gt; animates cameras along paths defined by waypoints (great for walkthroughs), and&lt;/li&gt;
  &lt;li&gt;WebVR and Cardboard support components are coming soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m also planning a few more features for xeogl’s rendering core, which will be nice to have in BIMSurfer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Order-independent_transparency&quot;&gt;order-independent transparency&lt;/a&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lighthouse3d.com/tutorials/view-frustum-culling/&quot;&gt;view frustum culling&lt;/a&gt;, and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Shadow_mapping&quot;&gt;shadow mapping&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;want-to-help-out&quot;&gt;Want to help out?&lt;/h2&gt;

&lt;p&gt;The best way contribute to BIMSurfer is to fork the &lt;a href=&quot;https://github.com/opensourcebim/BIMsurfer&quot;&gt;repository at GitHub&lt;/a&gt;.
We also use the &lt;a href=&quot;support.opensourcebim.org&quot;&gt;community forum&lt;/a&gt; from the open source BIM collective. Feel free to interact 
with other developers to help answer your questions. Then prepare a new branch with a new feature and post a pull request. 
&lt;br /&gt;&lt;br /&gt;
We will review your code and commit it into the official BIM Surfer code base. Alternatively you can also attach a patch 
into our &lt;a href=&quot;https://github.com/opensourcebim/BIMsurfer/issues&quot;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/xeogl-in-bimsurfer&quot;&gt;BIMSurfer Online BIM Viewer&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on June 27, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[SolidComponents™ Online CAD Viewer]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/solidcomponents-viewer" />
  <id>http://xeolabs.com/portfolio/solidcomponents-viewer</id>
  <updated>2018-07-31T00:00:00-00:00</updated>
  <published>2018-06-11T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;p&gt;In 2018, I worked remotely with &lt;strong&gt;&lt;a href=&quot;https://www.solidcomponents.com&quot;&gt;SolidComponents™&lt;/a&gt;&lt;/strong&gt; in Halmstad, Sweden, to develop 
the WebGL-based 3D CAD viewer within their online engineering components catalog.
&lt;br /&gt;&lt;br /&gt;
We developed the CAD viewer on &lt;strong&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;&lt;/strong&gt;, an open source WebGL library I created for developing 
3D model visualization applications in Web browsers without using plugins.
&lt;br /&gt;&lt;br /&gt;
In this article, I’ll describe some of the features that I implemented within the CAD viewer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://xeolabs.com/images/gear.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;contents&quot;&gt;Contents&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#the-client&quot;&gt;The Client&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#requirements&quot;&gt;Requirements&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#solution&quot;&gt;Solution&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#3dxml&quot;&gt;3DXML&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wireframe&quot;&gt;Wireframe&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-client&quot;&gt;The Client&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.solidcomponents.com&quot;&gt;SolidComponents™&lt;/a&gt;&lt;/strong&gt; is a company based in Halmstad, Sweden that provides an online catalog of 
engineering components. For each component, the catalog provides a static image, a table of attributes, and a downloadable 
&lt;a href=&quot;https://en.wikipedia.org/wiki/3DXML&quot;&gt;3DXML&lt;/a&gt; CAD model that was originally created in SolidWorks.&lt;/p&gt;

&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Create a WebGL-based viewer for users to interactively view the 3D model of each product in the catalog&lt;/li&gt;
  &lt;li&gt;Render using realistic, physically-based materials&lt;/li&gt;
  &lt;li&gt;Render wireframe and transparent views&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- SolidComponents had already made some experimental viewers on THREE.js to load STL and OBJ files exported from SolidWorks, but  --&gt;
&lt;!-- was having difficulty getting the final appearance of the models right using those file formats. --&gt;
&lt;p&gt;&lt;!-- &lt;br&gt;&lt;br&gt;One of the the trickiest things  --&gt;
&lt;!-- was correctly smooth shading the models, since the face-aligned STL normals are useless for smooth shading, and the  --&gt;
&lt;!-- vertex-aligned OBJ normals often caused hard edges to appear incorrectly smooth.   --&gt;&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;h3 id=&quot;using-xeogl&quot;&gt;Using xeogl&lt;/h3&gt;

&lt;p&gt;I implemented the SolidComponents CAD viewer as a wrapper class around &lt;strong&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;&lt;/strong&gt;, an open source 
WebGL library I created for 3D visualization.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/solidcomponents/uml.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dxml&quot;&gt;3DXML&lt;/h3&gt;

&lt;p&gt;I chose to make the viewer load the downloadable 3DXML model itself, rather than load some other format from SolidWorks, such 
as STL or OBJ. This way, we’re guaranteed to have a rendition that closely matches the way the 3DXML model looks in 
SolidWorks. Also, STL and OBJ were not able to express the same materials that we would see in the 3DXML. 
&lt;br /&gt;&lt;br /&gt;
A nice feature of 3DXML is that all the files that comprise the model (ie. scene, geometry and material descriptors) are 
packed into a single ZIP archive that can be loaded in a single HTTP request. Internally, the viewer then unpacks the files within 
the ZIP archive, converts the XML to JSON, and then parses the JSON using a recursive descent parser, to create the various 
3D objects within the xeogl scene graph.&lt;/p&gt;

&lt;h3 id=&quot;wireframe&quot;&gt;Wireframe&lt;/h3&gt;

&lt;p&gt;Often, a 3DXML file contains multiple representations of a model, such as solid-shaded and wireframe. In this 
case, however, we could only rely on it to contain a solid triangle mesh representation. Therefore, for wireframe views, 
I’m relying on xeogl to auto-generate the wireframe representation from the triangle mesh.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For each geometry, xeogl creates a second wireframe mesh that contains the edges between adjacent triangles whose surface 
normals deviate from each other by a given threshold, ie. the “hard” edges. This technique eliminates the “inner” edges, 
which are edges shared by triangles that are part of the same faces.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/solidcomponents/innerEdges.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/solidcomponents/innerEdgesRemoved.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Wireframe with inner edges&lt;/td&gt;
      &lt;td&gt;Inner edges eliminated&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;(work-in-progress)&lt;/p&gt;

&lt;!-- #### STL models --&gt;

&lt;!-- Initially, I experimented with loading the **[STL](https://en.wikipedia.org/wiki/STL_(file_format))** format, which is also exported by SolidWorks. --&gt;
&lt;!-- &lt;br&gt;&lt;br&gt; --&gt;
&lt;!-- ![](http://xeolabs.com/images/solidcomponents/gearWhiteBG.png) --&gt;

&lt;!-- Triangles in STL are disjoint, where each triangle has its own separate vertex positions, normals and  --&gt;
&lt;!-- (optionally) colors. This means that you can have gaps between triangles. Normals for each triangle are perpendicular to the triangle&#39;s surface, which gives the model a  --&gt;
&lt;!-- faceted appearance by default. The smoothNormals flag causes the STLModel to recalculate its normals, so that each normal&#39;s  --&gt;
&lt;!-- direction is the average of the orientations of the triangles adjacent to its vertex. When smoothing, each vertex normal  --&gt;
&lt;!-- is set to the average of the orientations of all other triangles that have a vertex at the same position, excluding those  --&gt;
&lt;!-- triangles whose direction deviates from the direction of the vertice&#39;s triangle by a threshold given in smoothNormalsAngleThreshold.  --&gt;
&lt;!-- This makes smoothing robust for hard edges.  --&gt;

&lt;!-- Normals in STL are face-aligned for a  --&gt;
&lt;!-- flat-shaded appearance, so I ignored them and relied on xeogl to auto-generate them per-vertex. To handle hard edges  --&gt;
&lt;!-- correctly, I extended xeogl&#39;s auto-generation to --&gt;

&lt;!-- #### OBJ Models --&gt;

&lt;!-- The client had previously made an experimental viewer on THREE.js that loaded OBJ exported by SolidWorks. However, OBJ contained  --&gt;
&lt;!-- vertex normals that rendered every edge as smooth-shaded, even when it was &quot;hard&quot; and should have rendered with a  --&gt;
&lt;!-- crease. --&gt;
&lt;!-- &lt;br&gt;&lt;br&gt; --&gt;
&lt;p&gt;&lt;!--  --&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/solidcomponents-viewer&quot;&gt;SolidComponents™ Online CAD Viewer&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on June 11, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[xeogl - WebGL engine for ArchViz & CAD]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/xeogl" />
  <id>http://xeolabs.com/portfolio/xeogl</id>
  <updated>2018-19-09T00:00:00-00:00</updated>
  <published>2018-03-10T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/xeogl&quot;&gt;xeogl - WebGL engine for ArchViz & CAD&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on March 10, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[SceneJS - WebGL engine for MedViz]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/scenejs" />
  <id>http://xeolabs.com/portfolio/scenejs</id>
  <updated>2018-19-09T00:00:00-00:00</updated>
  <published>2018-03-09T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/scenejs&quot;&gt;SceneJS - WebGL engine for MedViz&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on March 09, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[xeometry - WebGL Library for viewing glTF]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/xeometry" />
  <id>http://xeolabs.com/portfolio/xeometry</id>
  <updated>2018-19-09T00:00:00-00:00</updated>
  <published>2018-02-16T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#using-object-ids&quot; id=&quot;markdown-toc-using-object-ids&quot;&gt;Using object IDs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#using-object-types&quot; id=&quot;markdown-toc-using-object-types&quot;&gt;Using object types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#bookmarking&quot; id=&quot;markdown-toc-bookmarking&quot;&gt;Bookmarking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#features&quot; id=&quot;markdown-toc-features&quot;&gt;Features&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#architecture&quot; id=&quot;markdown-toc-architecture&quot;&gt;Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;Last month I made &lt;em&gt;&lt;a href=&quot;http://xeolabs.com/xeometry&quot;&gt;xeometry&lt;/a&gt;&lt;/em&gt;, a WebGL-based toolkit for viewing and navigating models
loaded from glTF.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;A xeometry viewer is basically a wrapper around &lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;, providing methods to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;load models from glTF,&lt;/li&gt;
  &lt;li&gt;reference objects by ID or type,&lt;/li&gt;
  &lt;li&gt;show, hide and transform objects,&lt;/li&gt;
  &lt;li&gt;visually emphasise objects, using effects like outlines and x-ray views,&lt;/li&gt;
  &lt;li&gt;query object boundaries,&lt;/li&gt;
  &lt;li&gt;raycast to select objects,&lt;/li&gt;
  &lt;li&gt;move the camera around to look at target objects, and&lt;/li&gt;
  &lt;li&gt;save and load viewer state as JSON “bookmarks”.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-object-ids&quot;&gt;Using object IDs&lt;/h2&gt;

&lt;p&gt;You can also just operate on objects using their IDs:&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#presentation_annotations_tronTank&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/sawObjects.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;canvasId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;theCanvas&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;saw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/Reciprocating_Saw.gltf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Make the red plastic casing transparent&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_1.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_2.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_3.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_11.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_110.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_29.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_7.entity.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;saw#body-node_6.entity.0&quot;&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;saw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;using-object-types&quot;&gt;Using object types&lt;/h2&gt;

&lt;p&gt;You can tag entities within your glTF with type codes, then once you’ve
loaded it, you’re able to do operations on sets of objects that are selected by type, such as &lt;em&gt;“make everything
in the gearbox transparent except for the bearings and shafts”&lt;/em&gt;.
&lt;br /&gt;&lt;br /&gt;
Here’s an example, using a hypothetical type system for gearbox components:&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#presentation_annotations_tronTank&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/typeViewer.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

 &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gearbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/GearboxAssy.gltf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gearbox&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Everything in model transparent&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setOpacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bearing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shaft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Bearings and shafts opaque&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewFit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bearing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;shaft&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Fit 3D view to bearings and shafts&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bookmarking&quot;&gt;Bookmarking&lt;/h2&gt;

&lt;p&gt;Once you’ve programmed the view you want, you can save it as a JSON bookmark.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bearingsAndShafts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getBookmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewer2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Viewer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;canvasId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;anotherCanvas&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;viewer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setBookmark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bearingsAndShafts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can then reload that bookmark at any time to restore the view. You can also of course load the
bookmark into other viewer instances, as long as they are able to load the models it references.&lt;/p&gt;

&lt;p&gt;Here’s the bookmark we just saved: &lt;a href=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;load IFC models from glTF,&lt;/li&gt;
  &lt;li&gt;transform, show and hide objects,&lt;/li&gt;
  &lt;li&gt;control object opacities,,&lt;/li&gt;
  &lt;li&gt;query object boundaries,&lt;/li&gt;
  &lt;li&gt;raycast to find objects,&lt;/li&gt;
  &lt;li&gt;navigate camera to objects, and&lt;/li&gt;
  &lt;li&gt;save and load JSON bookmarks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being able to programmatically control objects lets us code animated presentations, like exploding parts assemblies, guided tours and so on.&lt;/p&gt;

&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;

&lt;p&gt;The API consists of a single &lt;code&gt;Viewer&lt;/code&gt; class, which is a facade wrapping a xeogl &lt;code&gt;Scene&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The viewer API represents everything in the Scene
with IDs, managing the scene objects, camera etc. internally.&lt;/p&gt;

&lt;p&gt;For scalability, I’d normally break it up
into various classes representing scene objects, camera  etc, but in this case I went for a single facade in order to have
 a simple data-driven boundary between the xeogl graphics engine and the application layer.
 &lt;br /&gt;&lt;br /&gt;
The API represents everything in the viewer with IDs, managing entities internally. This results in a set of self-contained
and data-driven methods that are easy to play around with in the browser’s JavaScript console.
 &lt;br /&gt;&lt;br /&gt;
 With xeogl doing all the heavy lifting, and with much of the required functionality built into xeogl by
 design, the facade turned out to be a very thin wrapper of around a thousand lines of code or so.&lt;/p&gt;

&lt;p&gt;With regard to the IFC, element types are about as far as the IFC support goes for this viewer. I’m thinking that a
typical BIM application layer would manage other aspects of the IFC schema, such as layers, relationships etc, while the
viewer can just use object IDs and types to reference the objects in the 3D view.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/xeometry&quot;&gt;xeometry - WebGL Library for viewing glTF&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on February 16, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Creating WebGL Demos for zSpace using xeogl]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/xeogl-and-zspace" />
  <id>http://xeolabs.com/portfolio/xeogl-and-zspace</id>
  <updated>2017-19-03T00:00:00-00:00</updated>
  <published>2018-02-16T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#zspace-support-in-xeogl&quot; id=&quot;markdown-toc-zspace-support-in-xeogl&quot;&gt;zSpace support in xeogl&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#detecting-zspace-support&quot; id=&quot;markdown-toc-detecting-zspace-support&quot;&gt;Detecting zSpace support&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#stylus-tracking&quot; id=&quot;markdown-toc-stylus-tracking&quot;&gt;Stylus tracking&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#zspacestyluscontrol&quot; id=&quot;markdown-toc-zspacestyluscontrol&quot;&gt;ZSpaceStylusControl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;a href=&quot;http://zspace.com&quot;&gt;&lt;strong&gt;zSpace&lt;/strong&gt;&lt;/a&gt; is a technology firm based in Sunnyvale, California that creates mixed reality systems that combine elements of virtual and augmented reality in a specially-built computer system, which has a quad-buffered stereo display that works with IR-tracked active-shuttered glasses and a stylus.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;&lt;strong&gt;xeogl&lt;/strong&gt;&lt;/a&gt; is an open-source WebGL-based 3D engine that I’ve been working on for the past year or so.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;Last year, zSpace loaned me one of their &lt;em&gt;zSpace 300&lt;/em&gt; displays so that I could put together some xeogl demos for its beta WebVR support. If you were at &lt;a href=&quot;www.gdconf.co&quot;&gt;GDC 2017&lt;/a&gt;, you might have seen those demos running at the &lt;a href=&quot;https://www.khronos.org/news/events/gdc-2017#gdc2017_booth&quot;&gt;Khronos booth&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
 &lt;img src=&quot;http://xeolabs.com/images/xeogl/zspace/zSpaceDevice.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;These demos were my first foray into WebVR and were lots of fun to make. If you happen to be using a zSpace 300 right now, go ahead and click these thumbnails to run them: 
 &lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_geometries&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/zspace/zspace-geometries.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_gearbox&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/zspace/zspace-gearbox.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_ReciprocatingSaw&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/zspace/zspace-saw.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_geometries&quot;&gt;Simple geometries&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_gearbox&quot;&gt;Gearbox loaded from glTF&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#effects_zspace_ReciprocatingSaw&quot;&gt;Saw loaded from glTF&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;zspace-support-in-xeogl&quot;&gt;zSpace support in xeogl&lt;/h2&gt;

&lt;p&gt;To support zSpace, I added two new component types to xeogl:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceEffect.html&quot;&gt;ZSpaceEffect&lt;/a&gt; - renders its scene in quad-buffered stereo while updating the viewing and projection transforms off the zSpace WebVR device events.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceStylusControl.html&quot;&gt;ZSpaceStylusControl&lt;/a&gt; - an input control to select and drag entities with the stylus.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a quick look at how these components are used.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;First, I’ll set up a 3D scene by importing a &lt;a href=&quot;https://github.com/KhronosGroup/glTF&quot;&gt;glTF&lt;/a&gt; model into xeogl, using a &lt;a href=&quot;http://xeogl.org/docs/classes/GLTFModel.html&quot;&gt;GLTFModel&lt;/a&gt; component:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GLTFModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/gltf/2.0/Reciprocating_Saw/PBR-SpecGloss/Reciprocating_Saw.gltf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;rotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our model is the red reciprocating saw shown in the third thumbnail above. I’ve also attached a &lt;a href=&quot;http://xeogl.org/docs/classes/Rotate.html&quot;&gt;Rotate&lt;/a&gt; to our GLTFModel, just to tip it upright so that we can see it more clearly.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;Now, to view the model on the zSpace display, I’ll simply create a &lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceEffect.html&quot;&gt;ZSpaceEffect&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ZSpaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That activates immediately, rendering whatever we have in our scene in quad-buffered stereo. At this point, we can put on our stereo glasses and see the model rendering in 3D.&lt;/p&gt;

&lt;h3 id=&quot;detecting-zspace-support&quot;&gt;Detecting zSpace support&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceEffect.html&quot;&gt;ZSpaceEffect&lt;/a&gt; will fire a “supported” event once it has determined whether or not your browser is running on a zSpace viewer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;supported&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;supported&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
         &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This computer is not a ZSpace viewer! Inconceivable.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;           
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;stylus-tracking&quot;&gt;Stylus tracking&lt;/h3&gt;

&lt;p&gt;Now let’s track the World-space position and direction of the zSpace stylus. Also, whenever we press button 0 on the stylus while intersecting an entity, we’ll ray-pick the entity with the stylus.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylusPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stylus position: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
 &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylusDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Stylus direction: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 
 &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stylusButton0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;pickSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusDir&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  
         &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Entity selected with stylus: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;note that we can also just poll the ZSpaceEffect at any time for the current state of the stylus:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;c1&quot;&gt;// Get stylus position&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stylusPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stylusDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusDir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
 &lt;span class=&quot;c1&quot;&gt;// Get button states&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusButton0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Boolean&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusButton1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stylusButton2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;zspacestyluscontrol&quot;&gt;ZSpaceStylusControl&lt;/h3&gt;

&lt;p&gt;In xeogl we’d normally wrap your input controls in reusable components, so I added the &lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceStylusControl.html&quot;&gt;ZSpaceStylusControl&lt;/a&gt; as an boilerplate/example on which you might base your own zSpace stylus control.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;This component:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hooks into the &lt;a href=&quot;http://xeogl.org/docs/classes/ZSpaceEffect.html&quot;&gt;ZSpaceEffect&lt;/a&gt; events we just saw,&lt;/li&gt;
  &lt;li&gt;renders a 3D line segment that appears to extend from the tip of the stylus,&lt;/li&gt;
  &lt;li&gt;grabs intersecting entities when you push button 0, and&lt;/li&gt;
  &lt;li&gt;drags grabbed entities around while button 0 is down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To use it, all we need to do is add it to our scene:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zspaceStylusControl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ZSpaceStylusControl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point we can see a ray extending from the tip of our stylus, with which we can select and drag entities.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;zSpace’s support for WebVR is still in beta, so xeogl’s support for zSpace is also in beta.&lt;/strong&gt; Therefore, I’ll be changing the implementation of these xeogl components moving forwards, but their API should remain the same. Stay tuned!&lt;/p&gt;

&lt;iframe src=&quot;//giphy.com/embed/mRdkHVQ1NdUWc&quot; width=&quot;480&quot; height=&quot;270&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;a href=&quot;http://giphy.com/gifs/mRdkHVQ1NdUWc&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/xeogl-and-zspace&quot;&gt;Creating WebGL Demos for zSpace using xeogl&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on February 16, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Wind Turbine Testing for Windflow™]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/portfolio/windflow" />
  <id>http://xeolabs.com/portfolio/windflow</id>
  <updated>2018-19-09T00:00:00-00:00</updated>
  <published>2018-02-16T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/portfolio/windflow&quot;&gt;Wind Turbine Testing for Windflow™&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on February 16, 2018.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GPU-Assisted Picking in xeogl]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/xeogl-picking" />
  <id>http://xeolabs.com/articles/xeogl-picking</id>
  <updated>2017-30-08T00:00:00-00:00</updated>
  <published>2017-08-01T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot; id=&quot;markdown-toc-introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#four-types-of-picking-in-xeogl&quot; id=&quot;markdown-toc-four-types-of-picking-in-xeogl&quot;&gt;Four types of picking in xeogl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pick-entity-at-canvas-coordinates&quot; id=&quot;markdown-toc-pick-entity-at-canvas-coordinates&quot;&gt;1. Pick entity at canvas coordinates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pick-point-on-entity-surface-at-canvas-coords&quot; id=&quot;markdown-toc-pick-point-on-entity-surface-at-canvas-coords&quot;&gt;2. Pick point on entity surface at canvas coords&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pick-entity-with-world-space-ray&quot; id=&quot;markdown-toc-pick-entity-with-world-space-ray&quot;&gt;3. Pick entity with World-space ray&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pick-point-on-entity-surface-with-world-space-ray&quot; id=&quot;markdown-toc-pick-point-on-entity-surface-with-world-space-ray&quot;&gt;4. Pick point on entity surface with World-space ray&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pros-and-cons&quot; id=&quot;markdown-toc-pros-and-cons&quot;&gt;Pros and cons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#work-remaining&quot; id=&quot;markdown-toc-work-remaining&quot;&gt;Work remaining&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#references&quot; id=&quot;markdown-toc-references&quot;&gt;References&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hanrahan1990&quot; id=&quot;markdown-toc-hanrahan1990&quot;&gt;Hanrahan1990&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#lander2000&quot; id=&quot;markdown-toc-lander2000&quot;&gt;Lander2000&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;&lt;/strong&gt; is a WebGL-based engine for 3D visualization. In this article, I’ll describe xeogl’s
GPU-assisted picking system, which uses a multi-layer color-indexing rendering algorithm to ray-pick scene entities
in linear time complexity.
&lt;br /&gt;&lt;br /&gt;
&lt;img src=&quot;http://xeolabs.com/images/xeogl/pickingTeapots.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The color-indexed “WYSIWYG” picking method, which takes advantage of graphics hardware to render scene objects into an auxiliary frame buffer,
was first proposed by Robin Forrest in the mid-1980s and used in 3D painting by Hanrahan and Haeberli [&lt;a href=&quot;#hanrahan1990&quot;&gt;Hanrahan1990&lt;/a&gt;]. In their
implementation, each triangle is assigned a unique color which is used as an identifier. Given the cursor’s canvas coordinates and a map of IDs
to triangles, the picked position on the surface can be found by retrieving color values from the frame buffer and mapping them back to triangles.
&lt;br /&gt;&lt;br /&gt;
Jeff Lander extended this approach to calculate the exact intersection information, ie. the barycentric coordinates
within the intersected triangle. By setting additional color values to the three triangle vertices, he calculated the barycentric
coordinates by interpolation after the rasterization stage [&lt;a href=&quot;#lander2000&quot;&gt;Lander2000&lt;/a&gt;].
&lt;br /&gt;
&lt;br /&gt;
xeogl uses a three-stage picking technique:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Color-indexed method to find the picked object.&lt;/li&gt;
  &lt;li&gt;Color-indexed method to find the picked triangle within the object.&lt;/li&gt;
  &lt;li&gt;Calculations in JavaScript to find the barycentric coordinates, position, normal and UV.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;four-types-of-picking-in-xeogl&quot;&gt;Four types of picking in xeogl&lt;/h2&gt;

&lt;p&gt;xeogl supports four types of picking, which are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;pick entity at canvas coordinates,&lt;/li&gt;
  &lt;li&gt;pick point on entity surface at canvas coordinates,&lt;/li&gt;
  &lt;li&gt;pick entity with World-space ray, and&lt;/li&gt;
  &lt;li&gt;pick point on entity surface with World-space ray.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Types 1 and 3 just return the picked entity.
&lt;br /&gt;&lt;br /&gt;Types 2 and 4 return the picked entity, as well as information about the surface intersection, which includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the triangle,&lt;/li&gt;
  &lt;li&gt;barycentric coordinates within the triangle,&lt;/li&gt;
  &lt;li&gt;World space coordinates,&lt;/li&gt;
  &lt;li&gt;View space coordinates,&lt;/li&gt;
  &lt;li&gt;normal vector, and&lt;/li&gt;
  &lt;li&gt;UV coordinates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we’ll only get a normal if the entity’s geometry has normals, and UV coordinates if the
geometry has UVs. xeogl finds the values for these by interpolating within the values for the triangle vertices using
the barycentric coordinates.&lt;/p&gt;

&lt;h2 id=&quot;pick-entity-at-canvas-coordinates&quot;&gt;1. Pick entity at canvas coordinates&lt;/h2&gt;

&lt;p&gt;This type of picking is the simplest: we pick the closest entity behind the given canvas coordinates. This is equivalent to
firing a ray through the canvas, down the negative Z-axis, to find the first entity it hits.
&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#picking_canvas_pickEntity&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/pickingCanvasEntity.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
   &lt;br /&gt;&lt;a href=&quot;http://xeogl.org/examples/#picking_canvas_pickEntity&quot;&gt;Run demo&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
To show how to use it, we’ll start by loading a &lt;a href=&quot;http://xeogl.org/docs/classes/GLTFModel.html&quot;&gt;GLTFModel&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gearbox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GLTFModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/gltf/gearbox/gearbox_assy.gltf&quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With our model loaded and sitting in the middle of our canvas, we’ll try picking an entity at some canvas coordinates:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gearbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we hit an entity, then we’ll get a result containing a reference to it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Picked an entity&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can also listen for pick hits on individual entities:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gearbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gearbox#someGear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;picked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Internally, xeogl performs the following steps for this type of picking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User picks at canvas coordinates.&lt;/li&gt;
  &lt;li&gt;Render the scene to an auxiliary frame buffer, filling each entity with a unique colour that is the RBGA-encoded
index of its position within xeogl’s internal display list.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to the entity in the display list.&lt;/li&gt;
  &lt;li&gt;Return a hit result containing the entity.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pick-point-on-entity-surface-at-canvas-coords&quot;&gt;2. Pick point on entity surface at canvas coords&lt;/h2&gt;

&lt;p&gt;Like the previous type of picking, this one also picks the closest entity behind the given canvas coordinates, but also
gets geometric information about the point on the entity’s surface that lies right behind those canvas coordinates.
 &lt;br /&gt;
 &lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#picking_canvas_pickSurface&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/pickingCanvasEntitySurface.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
   &lt;br /&gt;&lt;a href=&quot;http://xeogl.org/examples/#picking_canvas_pickSurface&quot;&gt;Run demo&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
Reusing the scene from the previous example, we’ll pick again at the canvas coordinates, but this time
 we’ll supply a &lt;code&gt;pickSurface&lt;/code&gt; flag to indicate that we want information about the point we’re picking on the surface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gearbox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pickSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// &amp;lt;&amp;lt;----- Indicates that we want to pick on surface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here’s what we get in the pick result this time:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Picked an entity&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Entity we picked&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Type of primitive we picked, usually &quot;triangles&quot;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Index of triangle&#39;s first element within Entity&#39;s Geometry indices array&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Value of each of the triangle&#39;s vertex indices (a three element array)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Local-space coordinates&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// World-space coordinates&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// View-space coordinates&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// Barycentric coordinates within the triangle&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Interpolated normal vector within the triangle&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Interpolated UVs within the triangle&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can then get the triangle vertices like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get indices for each of the vertices of the picked triangle&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Get the triangle&#39;s local-space vertex positions&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ay&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;az&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Another way to get the indices&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indexABC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Internally, xeogl performs the following steps for this type of picking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User ray-picks at given canvas coordinates.&lt;/li&gt;
  &lt;li&gt;Render the scene to an auxiliary frame buffer, filling each entity with a unique colour that is the RBGA-encoded
index of its position within xeogl’s internal display list.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to an entity in the display list.&lt;/li&gt;
  &lt;li&gt;Clear the framebuffer, then render the triangles of the picked entity to it, filling each triangle with a unique color that
is the RBGA-encoded index of triangle’s first element within the entity’s geometry indices.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to the picked triangle.&lt;/li&gt;
  &lt;li&gt;Now that we have the entity and the triangle, make a ray in clip-space, originating at the eye position and passing through
the near projection plane at a position corresponding to where we picked, then unproject that ray to get a ray in the entity’s
local coordinate space.&lt;/li&gt;
  &lt;li&gt;Find the intersection of the ray with the triangle in local space.&lt;/li&gt;
  &lt;li&gt;Find the barycentric coordinates of the local-space intersection, then use those to interpolate within the triangle
to Find the normal vector and UV coordinates at that position.&lt;/li&gt;
  &lt;li&gt;Return a hit result containing the picked entity, the triangle, and the ray-triangle intersection info (see code example above).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For step (4) we lazy-compute extra vertex position and color arrays for the entity geometry, so that we can render each
triangle with a unique flat color. It’s actually very fast, so you’d hardly notice it, even with big meshes - &lt;a href=&quot;https://gist.github.com/xeolabs/6e53681b88e00773075e97460a5e7c72&quot;&gt;here’s
the math function&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;pick-entity-with-world-space-ray&quot;&gt;3. Pick entity with World-space ray&lt;/h2&gt;

&lt;p&gt;For this type of picking, xeogl fires a ray through the scene, in World-space, to pick the first entity it hits. I originally added
this to support the 3D stylus in some &lt;a href=&quot;http://xeolabs.com/articles/xeogl-and-zspace&quot;&gt;xeogl demo apps for the zSpace 300&lt;/a&gt;.
&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#picking_raycast_pickEntity&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/pickingRaycastEntity.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
   &lt;br /&gt;&lt;a href=&quot;http://xeogl.org/examples/#picking_raycast_pickEntity&quot;&gt;Run demo&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
To show how it’s done, we’ll fire a ray through the scene in World-space, to pick the first entity hit by the ray:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Ray origin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ray direction&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pickSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;&amp;lt;------ Don&#39;t want to pick a point on the surface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Picked an entity with the ray&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Entity we picked&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Internally, xeogl performs the following steps for this type of picking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User picks using a ray in World-space.&lt;/li&gt;
  &lt;li&gt;Position the camera to look along the ray.&lt;/li&gt;
  &lt;li&gt;Render the scene to an auxiliary frame buffer, filling each entity with a unique colour that is the RBGA-encoded
index of its position within xeogl’s internal display list.&lt;/li&gt;
  &lt;li&gt;Restore the camera to its previous position.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to an entity in the display list.&lt;/li&gt;
  &lt;li&gt;Return a hit result containing the entity.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pick-point-on-entity-surface-with-world-space-ray&quot;&gt;4. Pick point on entity surface with World-space ray&lt;/h2&gt;

&lt;p&gt;Like the previous type of picking, this one also involves firing a ray through the scene in World-space, to pick
 an entity, but this time we’re also getting geometric information about the intersection of the ray with the
 entity surface.
&lt;br /&gt;
&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#picking_raycast_pickSurface&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/pickingRaycastEntitySurface.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
   &lt;br /&gt;&lt;a href=&quot;http://xeogl.org/examples/#picking_raycast_pickSurface&quot;&gt;Run demo&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
Lets fire a ray through the scene in World-space, to pick a 3D position on the surface of the first entity hit by the ray:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Ray origin&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ray direction&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pickSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// &amp;lt;&amp;lt;--------- Indicates that we want to pick on surface&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Picked an entity with the ray&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Hit result contains the same properties as the second example&lt;/span&gt;
    
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Entity we picked&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primitive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primitive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Type of primitive we picked, usually &quot;triangles&quot;&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Triangle&#39;s first index within geometry indices&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// Triangle&#39;s vertex indices (a three element array)&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Local-space coordinates within the triangle&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// World-space coordinates within the triangle&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// View-space coordinates within the triangle&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// Barycentric coordinates within the triangle&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;normal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// Interpolated normal vector within the triangle&lt;/span&gt;
     &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;uv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;uv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// Interpolated UVs within the triangle&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Internally, xeogl performs the following steps for this type of picking:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User picks using a ray in World-space.&lt;/li&gt;
  &lt;li&gt;Position the camera to look along the ray.&lt;/li&gt;
  &lt;li&gt;Render the scene to an auxiliary frame buffer, filling each entity with a unique colour that is the RBGA-encoded
index of its position within xeogl’s internal display list.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to an entity in the display list.&lt;/li&gt;
  &lt;li&gt;Clear the framebuffer, then render the triangles of the picked entity to it, filling each triangle with a unique color that
is the RBGA-encoded index of the triangle’s first element within the entity’s geometry indices.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to the picked triangle.&lt;/li&gt;
  &lt;li&gt;Restore the camera to its previous position.&lt;/li&gt;
  &lt;li&gt;Now that we have the entity and the triangle, make a ray in clip-space, originating at the eye position and passing through
the near projection plane at a position corresponding to where we picked, then unproject that ray to get a ray in the entity’s
local coordinate space.&lt;/li&gt;
  &lt;li&gt;Find the intersection of the ray with the triangle in local space.&lt;/li&gt;
  &lt;li&gt;Find the barycentric coordinates of the local-space intersection, then use those to interpolate within the triangle
to find the normal vector and UV coordinates at that position.&lt;/li&gt;
  &lt;li&gt;Return a hit result containing the picked entity, the triangle, and the ray-triangle intersection info (see code example above).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;pros-and-cons&quot;&gt;Pros and cons&lt;/h2&gt;

&lt;p&gt;Ray-picking usually involves testing a ray for intersection with each object’s bounding box,
then having picked an object, testing the ray for intersection with each of the object’s triangles. This is normally done
on the CPU, with the assistance of a spatial lookup structure, such as a KD-tree. I believe this is how its done in THREE.js.
&lt;br /&gt;&lt;br /&gt;
Compared to the usual technique, xeogl will be faster for huge numbers of objects and triangles, since it avoids these
CPU-intensive calculations. There are some disadvantages, however:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;xeogl’s ray-picking technique only works for triangles so far. It should be possible to extend it to support line segments though.&lt;/li&gt;
  &lt;li&gt;The CPU-intensive technique can find multiple objects that intersect a ray, while xeogl’s technique only finds the closest
intersecting object to the ray origin.&lt;/li&gt;
  &lt;li&gt;As mentioned when &lt;a href=&quot;#pick-point-on-entity-surface-with-world-space-ray&quot;&gt;ray-picking triangles&lt;/a&gt;, xeogl lazy-computes extra
vertex position and color arrays for each entity we’re about to ray-pick a triangle from, so that we can render each of its
triangles with a unique flat color. That happens on-the-fly, just before we attempt to pick a triangle on the entity,
 and can’t be deferred to xeogl’s’ frame-budgeted task queue (like most computationally-intensive things in xeogl), because
 we need those arrays immediately. Therefore there can be a moment’s delay when picking a complex entity for the first time,
 plus the sudden memory needs for those two extra arrays. Since those extra arrays belong to the geometry, which can be
 instanced by multiple entities, this can be mitigated if we’re able to share (instance) our geometries among many entities. For example,
if we have a scene made up mostly of cubes, where we have one cube geometry shared by all our entities, then when we ray-pick
 our entities, we’re only calculating those arrays once, for the shared geometry.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-remaining&quot;&gt;Work remaining&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;When rendering to auxiliary frame buffers for ray-picking, xeogl renders the whole canvas-sized viewport. That’s wasteful
in terms of GPU efficiency and memory, so I need reduce the picking framebuffer, and temporarily the picking viewport, to 1x1 size.&lt;/li&gt;
  &lt;li&gt;As mentioned in the previous section, I also need to extend the ray-picking technique to select line segments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;h3 id=&quot;hanrahan1990&quot;&gt;Hanrahan1990&lt;/h3&gt;

&lt;p&gt;P. Hanrahan and P. Haeberli, “Direct WYSIWYG painting and texturing on 3D shapes,” ACM SIGGRAPH Computer Graphics, vol. 24, no. 4, pp. 215–223, 1990. View at Publisher · View at Google Scholar&lt;/p&gt;

&lt;h3 id=&quot;lander2000&quot;&gt;Lander2000&lt;/h3&gt;

&lt;p&gt;J. Lander, “Haunted trees for halloween,” Game Developer Magazine, vol. 7, no. 11, pp. 17–21, 2000. View at Google Scholar&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/xeogl-picking&quot;&gt;GPU-Assisted Picking in xeogl&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on August 01, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[An Annotation System for xeogl]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/article/xeogl-annotations" />
  <id>http://xeolabs.com/article/xeogl-annotations</id>
  <updated>2017-17-05T00:00:00-00:00</updated>
  <published>2017-05-30T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#camera-vantage-points&quot; id=&quot;markdown-toc-camera-vantage-points&quot;&gt;Camera vantage points&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-annotations-by-picking&quot; id=&quot;markdown-toc-creating-annotations-by-picking&quot;&gt;Creating annotations by picking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#occlusion-culling&quot; id=&quot;markdown-toc-occlusion-culling&quot;&gt;Occlusion culling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#events&quot; id=&quot;markdown-toc-events&quot;&gt;Events&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#styling&quot; id=&quot;markdown-toc-styling&quot;&gt;Styling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;I recently made a Sketchfab-style annotation system for &lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt;, a WebGL-based 3D engine
I’ve been working on.
&lt;br /&gt;&lt;br /&gt;
An annotation is a label that you pin to the surface a mesh. Click this screenshot for a &lt;a href=&quot;http://xeogl.org/examples/#annotations_tronTank&quot;&gt;demo&lt;/a&gt;:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://xeogl.org/examples/#annotations_tronTank&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/annotationsTank.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
The code below shows how to create an annotation. First, we’ll load our model:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SceneJSModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Importing a SceneJS model for fun&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tank&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/scenejs/tronTank/tronTank.json&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the model has loaded, we’ll create an &lt;a href=&quot;http://xeogl.org/docs/classes/Annotation.html&quot;&gt;Annotation&lt;/a&gt; on one of its meshes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loaded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tank.mesh9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// xeogl.Mesh instance or ID&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;468&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 &lt;span class=&quot;c1&quot;&gt;// First triangle vertex in geometry indices&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;bary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// Barycentric coordinates in triangle&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;glyph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                     &lt;span class=&quot;c1&quot;&gt;// Symbol(s) for pin&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Cannon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Fires chevron-shaped bolts of de-rezzing energy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.66&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;20.84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;21.59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// Camera eye position (optional)&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.39&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.84&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Camera point-of-interest (optional)&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.97&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// Camera &quot;up&quot; vector (optional)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The annotation is pinned at the given barycentric coordinates within a triangle of the mesh (the Tank’s cannon). Whenever the mesh
is transformed or deformed, the annotation will always stick to that position on the surface of the mesh. In the demo,
this is demonstrated by the (A) annotation on our Tron Tank’s cannon, which will move wherever the cannon goes.&lt;/p&gt;

&lt;h2 id=&quot;camera-vantage-points&quot;&gt;Camera vantage points&lt;/h2&gt;

&lt;p&gt;As we saw in the previous example, you can optionally specify a camera position from which to view the annotation, given as
&lt;code&gt;eye&lt;/code&gt;, &lt;code&gt;look&lt;/code&gt; and &lt;code&gt;up&lt;/code&gt; vectors. You can then fly the camera to look at the annotation by
passing the annotation to a &lt;a href=&quot;http://xeogl.org/docs/classes/CameraFlightAnimation.html&quot;&gt;CameraFlightAnimation&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cameraFlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CameraFlightAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;cameraFlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;creating-annotations-by-picking&quot;&gt;Creating annotations by picking&lt;/h2&gt;

&lt;p&gt;I made annotations easy to create from pick results:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mouseclicked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Ray-pick mesh surface&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;pickSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lookat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;camera&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mesh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;primIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;bary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;s2&quot;&gt;&quot;A new world awaits you&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;s2&quot;&gt;&quot;in the off-world colonies.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;nx&quot;&gt;lookat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;nx&quot;&gt;lookat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;         &lt;span class=&quot;nx&quot;&gt;lookat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;up&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With this snippet, whenever we click on the surface of an mesh, we’ll create an annotation at that
point. We’ll also save the current camera position with the annotation, so that we can restore the camera to the vantage
point that we created it from (see previous example).&lt;/p&gt;

&lt;h2 id=&quot;occlusion-culling&quot;&gt;Occlusion culling&lt;/h2&gt;

&lt;p&gt;The annotation system automatically hides annotations when they are occluded by other objects in the 3D view. You can see this in
the demo example, where the (C) annotation disappears while the cannon barrel moves over it.
&lt;br /&gt;&lt;br /&gt;
The system uses a fast GPU-assisted occlusion technique which renders a small point at each annotation’s position, then
determines the annotation to be occluded when the color of the point’s location on the canvas does not match the point. Since
reading WebGL’s drawing buffer is expensive, the system performs this occlusion test for all annotations in a batch on
every 10th frame or so. You’ll note a slight lag between when the annotation is occluded/revealed and hidden/shown.
&lt;br /&gt;&lt;br /&gt;
This technique is much more efficient than the standard ray-casting approach for large meshes and number of objects.
&lt;br /&gt;&lt;br /&gt;
Culling is enabled for an annotation by default, but you can disable it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;culling&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;events&quot;&gt;Events&lt;/h2&gt;

&lt;p&gt;Annotations fire some events that you can subscribe to. Let’s make it so that when you click an
annotation’s pin the camera will focus on the annotation and the label will open:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cameraFlight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CameraFlightAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lastAnnotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pinClicked&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastAnnotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelShown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;labelShown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cameraFlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;lastAnnotation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You can also track the annotation’s position in Local-space (coordinate space of mesh’s geometry
before modeling transformation) and World-space (after the modeling transform):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Local pos changed: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;annotation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;worldPos&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;World pos changed: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;\t&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Local position will change when the geometry is edited, while the World position will change when the
 geometry is edited and/or the modeling transform is updated.&lt;/p&gt;

&lt;h2 id=&quot;styling&quot;&gt;Styling&lt;/h2&gt;

&lt;p&gt;Annotations manage their HTML elements internally, giving them hardcoded CSS class names. The rules for those classes are defined
in &lt;a href=&quot;https://github.com/xeolabs/xeogl/blob/master/examples/js/annotations/annotation-style.css&quot;&gt;annotation-style.css&lt;/a&gt;, so
you can tweak that file if you want to customize the appearance of your annotations.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;So there you have it - an annotation system for &lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt; that’s inspired by the one
on &lt;a href=&quot;https://help.sketchfab.com/hc/en-us/articles/202512456-Annotations&quot;&gt;Sketchfab&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
The main points in this introduction were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;a href=&quot;http://xeogl.org/docs/classes/Annotation.html&quot;&gt;Annotation&lt;/a&gt; component class provides the means to pin labels on &lt;a href=&quot;http://xeogl.org/docs/classes/Mesh.html&quot;&gt;Entities&lt;/a&gt; that have triangle mesh
&lt;a href=&quot;http://xeogl.org/docs/classes/Geometry.html&quot;&gt;Geometries&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Since an annotation is pinned to a barycentric location with a its triangle, it can  dynamically
recalculate its Cartesian coordinates from the triangle vertices whenever the Mesh is transformed or the Geometry is
edited.&lt;/li&gt;
  &lt;li&gt;An annotation can be configured with a camera vantage point from which to view it. This is useful for focusing the camera
on the annotation, as part of a presentation.&lt;/li&gt;
  &lt;li&gt;The annotation API makes it easy to create annotations from the results of picking operations.&lt;/li&gt;
  &lt;li&gt;An Annotation will automatically hide itself when occluded by another object in the 3D view.&lt;/li&gt;
  &lt;li&gt;You can customize the appearance of annotations by editing their &lt;a href=&quot;https://github.com/xeolabs/xeogl/blob/master/examples/js/annotations/annotation-style.css&quot;&gt;CSS stylesheet&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;See the &lt;a href=&quot;http://xeogl.org/examples/#presentation_annotations_tronTank&quot;&gt;demo example&lt;/a&gt; to see annotations in action, click VIEW SOURCE so see the source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/article/xeogl-annotations&quot;&gt;An Annotation System for xeogl&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on May 30, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Adding Physically Based Rendering to xeogl]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/xeogl-pbr" />
  <id>http://xeolabs.com/articles/xeogl-pbr</id>
  <updated>2017-14-02T00:00:00-00:00</updated>
  <published>2017-02-16T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#api-additions&quot; id=&quot;markdown-toc-api-additions&quot;&gt;API additions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#combining-textures&quot; id=&quot;markdown-toc-combining-textures&quot;&gt;Combining textures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#work-remaining&quot; id=&quot;markdown-toc-work-remaining&quot;&gt;Work remaining&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;
&lt;p&gt;This month I extended &lt;a href=&quot;http://xeogl.org&quot;&gt;xeogl&lt;/a&gt; to support Physically Based Rendering (PBR), which is an approach to rendering 
that uses real world values to provide results that are more accurate and consistent under all lighting conditions. 
&lt;br /&gt;&lt;br /&gt;
xeogl’s PBR is fairly standard so far:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cook-Torrance BRDF&lt;/li&gt;
  &lt;li&gt;GGX microfacet distribution&lt;/li&gt;
  &lt;li&gt;Shlick’s approximation for specular Fresnel&lt;/li&gt;
  &lt;li&gt;Image-base lighting&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also extended xeogl to load &lt;a href=&quot;https://github.com/KhronosGroup/glTF&quot;&gt;glTF&lt;/a&gt; models with PBR materials, for 
both &lt;em&gt;metallic/roughness&lt;/em&gt; and &lt;em&gt;specular/glossiness&lt;/em&gt; work flows, using the FRAUNHOFER_materials_pbr extension.&lt;/p&gt;

&lt;p&gt;This is still a work in progress, as I’m following along behind the current development of the glTF 2.0 spec. Also, I’m learning PBR 
 as I go here, and still need to implement some of those little things in the shaders that really make it look good, like HDR lighting, 
gamma correction and tone mapping.
&lt;br /&gt;&lt;br /&gt;
For an introduction to PBR concepts, check out the &lt;a href=&quot;https://www.allegorithmic.com/pbr-guide&quot;&gt;Allegorithmic PBR Guide&lt;/a&gt;.
&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#importing_gltf_pbr_metallic_helmet&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/MetallicMaterial/helmet.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#materials_metallic_fireHydrant&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/MetallicMaterial/hydrant0.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#importing_gltf_pbr_specular_saw&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/SpecularMaterial/reciprocatingSaw.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/importing_scenejs_tronTank.html&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/MetallicMaterial/scenejsTronTank.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xeogl.org/examples/#importing_gltf_pbr_metallic_telephone&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/xeogl/MetallicMaterial/telephone.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;api-additions&quot;&gt;API additions&lt;/h3&gt;

&lt;p&gt;To support PBR, I added two new material component types to xeogl, which closely follow glTF’s PBR spec:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/MetallicMaterial.html&quot;&gt;MetallicMaterial&lt;/a&gt; to support a &lt;em&gt;metallic/roughness&lt;/em&gt; workflow, and&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://xeogl.org/docs/classes/SpecularMaterial.html&quot;&gt;SpecularMaterial&lt;/a&gt; to support a &lt;em&gt;specular/glossiness&lt;/em&gt; workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code snippet below, which creates the yellow fire hydrant example shown above, gives an example of how these 
materials are used within xeogl’s entity-component API.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Entity with ObjGeometry and MetallicMaterial components&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fireHydrant&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OBJGeometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;models/obj/FireHydrantMesh.obj&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;

   &lt;span class=&quot;na&quot;&gt;material&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MetallicMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;        
       &lt;span class=&quot;na&quot;&gt;baseColorMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// RGB is baseColor&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/diffuse/fire_hydrant_Base_Color.png&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;metallicMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// R component is metallic&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/metallic/fire_hydrant_Metallic.png&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;roughnessMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// R component is roughness&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/roughness/fire_hydrant_Roughness.png&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;occlusionMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// R component is ambient occlusion&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/occlusion/fire_hydrant_Mixed_AO.png&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;normalMap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xeogl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Texture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/normal/fire_hydrant_Normal_OpenGL.png&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;combining-textures&quot;&gt;Combining textures&lt;/h3&gt;

&lt;p&gt;Note that each channel on the MetallicMaterial in our hydrant example has its own individual texture. This happens to allow us to 
switch each texture on and off with a GUI, so that we can see its effect.
&lt;br /&gt;&lt;br /&gt;
To reduce download times, however, glTF combines some material channels within the same textures. Therefore, for compatibility with glTF, 
I also made xeogl support these multichannel textures. For instance, instead of having a &lt;strong&gt;metallicMap&lt;/strong&gt; and a &lt;strong&gt;roughnessMap&lt;/strong&gt; the 
MetallicMaterial from our example could instead have a combined &lt;strong&gt;metallicRoughnessMap&lt;/strong&gt;, which would have &lt;em&gt;metalness&lt;/em&gt; in its 
texture’s R component and &lt;em&gt;roughness&lt;/em&gt; in its G component.&lt;/p&gt;

&lt;h3 id=&quot;work-remaining&quot;&gt;Work remaining&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Proper accreditation on all models.&lt;/li&gt;
  &lt;li&gt;Organize glTF examples better. Organize them into 1.0, 1.1 and 2.0 categories so that xeogl support can be checked at a glance.&lt;/li&gt;
  &lt;li&gt;HDR for IBL (looks so rough without this).&lt;/li&gt;
  &lt;li&gt;Gamma correction - not sure yet at what scope to do this in the API - per material, per model or entire scene?&lt;/li&gt;
  &lt;li&gt;Tone mapping - will probably need to build up a postprocessing framework and make this an effect that plugs into it.&lt;/li&gt;
&lt;/ul&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/xeogl-pbr&quot;&gt;Adding Physically Based Rendering to xeogl&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on February 16, 2017.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[SceneJS v4.0 Released]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs4-release" />
  <id>http://xeolabs.com/articles/scenejs4-release</id>
  <updated>2014-07-24T00:00:00-00:00</updated>
  <published>2014-09-26T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#postproccessing-effects&quot; id=&quot;markdown-toc-postproccessing-effects&quot;&gt;Postproccessing effects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multipass-rendering&quot; id=&quot;markdown-toc-multipass-rendering&quot;&gt;Multipass rendering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#procedural-textures&quot; id=&quot;markdown-toc-procedural-textures&quot;&gt;Procedural textures&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reflection-mapping&quot; id=&quot;markdown-toc-reflection-mapping&quot;&gt;Reflection mapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#optimisations-by-nvidia&quot; id=&quot;markdown-toc-optimisations-by-nvidia&quot;&gt;Optimisations by NVIDIA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#texture-node-changes&quot; id=&quot;markdown-toc-texture-node-changes&quot;&gt;Texture node changes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#plugin-renamings&quot; id=&quot;markdown-toc-plugin-renamings&quot;&gt;Plugin renamings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#new-examples-browser&quot; id=&quot;markdown-toc-new-examples-browser&quot;&gt;New examples browser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#post-release&quot; id=&quot;markdown-toc-post-release&quot;&gt;Post-release&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/xeolabs/scenejs/releases/tag/v4.0&quot;&gt;SceneJS v4.0&lt;/a&gt; adds:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;custom effects pipelines (AKA postprocessing),&lt;/li&gt;
  &lt;li&gt;multi-pass rendering,&lt;/li&gt;
  &lt;li&gt;procedural textures,&lt;/li&gt;
  &lt;li&gt;reflection maps,&lt;/li&gt;
  &lt;li&gt;a bunch of sweet performance optimizations by NVIDIA,&lt;/li&gt;
  &lt;li&gt;a change to texture nodes (which unfortunately breaks backwards compatibility),&lt;/li&gt;
  &lt;li&gt;renamings of some plugins, and&lt;/li&gt;
  &lt;li&gt;a new &lt;a href=&quot;http://scenejs.org/examples/index.html#scenegraph_firstExample&quot;&gt;examples browser&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m going to write more tutorials on these new features at some point, but hopefully the examples will help for now.&lt;/p&gt;

&lt;h2 id=&quot;postproccessing-effects&quot;&gt;Postproccessing effects&lt;/h2&gt;

&lt;p&gt;SceneJS 4.0 lets you build effects pipelines of virtually unlimited complexity. You can render portions of your scene to
colour and depth &lt;em&gt;render targets&lt;/em&gt;, which you then apply as textures, or feed into custom shaders in other parts of your scene.
In the example below, I’m doing a &lt;em&gt;depth-of-field&lt;/em&gt; postprocessing effect by rendering the scene to colour and depth targets, then
piping those targets into a second stage where we render the colour target to a screen-aligned quad, while blurring each pixel
in proportion to its value in the depth buffer.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/HNsJ7j6XZJU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_depthOfField&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;I’ve implemented a few postprocessing effects as node types that you can just drop into your scene:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_depthOfField_autofocus&quot;&gt;Depth-of-field&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_blur&quot;&gt;Blur&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_scanlines&quot;&gt;Scanlines&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_sepia&quot;&gt;Sepia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#postprocessing_technicolor&quot;&gt;Technicolor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned - I’ll do a few more soon, such as a &lt;em&gt;bloom filter&lt;/em&gt; and maybe &lt;em&gt;motion blur&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;multipass-rendering&quot;&gt;Multipass rendering&lt;/h2&gt;

&lt;p&gt;SceneJS v4.0 also supports &lt;em&gt;multi-pass&lt;/em&gt; rendering, where you can configure the scene to render multiple passes per frame,
while updating scene state for each pass. This is really useful for stereoscopic effects like Anaglyph 3D, where we render
one pass to the green-blue color channels with camera looking through the left eye, and a second pass to the red channel
 with the camera looking through the right eye.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/WQ5FOA1V40o?list=PLZKDjaM3SUtcBMa-CtxT8WCI_mCF2VGpD&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples/index.html#effects_anaglyph&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
Oculus Rift support didn’t make it into this release unfortunately (I don’t actually have a Rift device, so need a bit more time to
  tweak things).&lt;/p&gt;

&lt;h2 id=&quot;procedural-textures&quot;&gt;Procedural textures&lt;/h2&gt;

&lt;p&gt;Now that we can render portions of our scenes to render targets, then apply those as textures, we can generate textures using shaders lifted straight off
GLSL sharing sites like &lt;a href=&quot;http://shadertoy.com&quot;&gt;ShaderToy&lt;/a&gt; and &lt;a href=&quot;http://glslsandbox.com&quot;&gt;GLSL Sandbox&lt;/a&gt;. Check this one out, copied from GLSL Sandbox:&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/1I71UWg1Wmg?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples/index.html#texture_procedural_color_water&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reflection-mapping&quot;&gt;Reflection mapping&lt;/h2&gt;

&lt;p&gt;SceneJS v4.0 now supports reflection mapping, a feature that was actually in &lt;em&gt;alpha&lt;/em&gt; status in
the previous version. Check out &lt;a href=&quot;/articles/scenejs-reflection&quot;&gt;this tutorial&lt;/a&gt; for more info. &lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=cubeMap&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflectionLayered.jpg&quot; alt=&quot;Reflection Example 1&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=cubeMap&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;optimisations-by-nvidia&quot;&gt;Optimisations by NVIDIA&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.oletus.fi/&quot;&gt;Olli Etuaho&lt;/a&gt; from NVIDIA has made some valuable optimizations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.tojicode.com/2012/10/oesvertexarrayobject-extension.html&quot;&gt;Vertex Array Objects (VAO)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.tojicode.com/2011/05/interleaved-array-basics.html&quot;&gt;Vertex interleaving&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Reduced unnecessary uniform reloading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are primarily aimed at making SceneJS render faster on mobile, GPU-bound devices, and Olli reports as much as a
45% speedup on Tegra-based devices with some scenes! He’s also done some optimisations to &lt;a href=&quot;http://threejs.org&quot;&gt;THREE.js&lt;/a&gt; as well, so props to Olli on that.&lt;/p&gt;

&lt;h2 id=&quot;texture-node-changes&quot;&gt;Texture node changes&lt;/h2&gt;

&lt;p&gt;Besides some plugin renamings (see below), the only breakage in backward compatibility in this release (hence the major version change) is with the &lt;strong&gt;texture&lt;/strong&gt; node,
as shown below. Previously, the texture node had a &lt;strong&gt;layers&lt;/strong&gt; property, in which we could specify one or more texture layers.
Now in v4.0 we specify layers as individual nested texture nodes, which makes updating properties on the layers much cleaner.
When we want to update a layer’s blend factor, for example, we get the texture for the layer and set that property on the node,
without having to specify a layer index as we did before.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Create scene&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Superman color map in layer #1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texture1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/superman.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// General Zod color map in layer #2&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;texture2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;textures/zod.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;color&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;blendFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Box primitive&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;texture2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;texture2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;myTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setBlendFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The old texture node with the &lt;strong&gt;layers&lt;/strong&gt; property will hang around for the next couple of versions, and now has
type &lt;strong&gt;“_texture”&lt;/strong&gt;. The leading underscore indicates that node is deprecated. To make existing application code work
with SceneJS v4.0, just do a search-and-replace, replacing “texture” with “_texture”.&lt;/p&gt;

&lt;h2 id=&quot;plugin-renamings&quot;&gt;Plugin renamings&lt;/h2&gt;

&lt;p&gt;I’ve tidied up the names of a few plugins, which define non-core node types:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;v3.2&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;v4.0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/box&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_box&quot;&gt;geometry/box&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/cylinder&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_cylinder&quot;&gt;geometry/cylinder&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/grid&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_grid&quot;&gt;geometry/grid&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/heightmap&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_heightmap&quot;&gt;geometry/heightmap&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/plane&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_plane&quot;&gt;geometry/plane&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/quad&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_quad&quot;&gt;geometry/quad&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/sphere&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_sphere&quot;&gt;geometry/sphere&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/teapot&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_teapot&quot;&gt;geometry/teapot&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/torus&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_torus&quot;&gt;geometry/torus&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;prims/vectorText&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#geometry_vectorText&quot;&gt;geometry/vectorText&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;objects/vehicles/tank&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#models_vehicles_tank&quot;&gt;models/vehicles/tank&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;objects/space/planets/earth&lt;/td&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/index.html#models_space_earth&quot;&gt;models/space/planets/earth&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;new-examples-browser&quot;&gt;New examples browser&lt;/h2&gt;

&lt;p&gt;And finally - a &lt;a href=&quot;http://scenejs.org/examples/index.html#scenegraph_firstExample&quot;&gt;new examples browser&lt;/a&gt; based on the one
used over at THREE.js. Hopefully it doesn’t look too similar - I may have to style it a bit more.&lt;/p&gt;

&lt;h2 id=&quot;post-release&quot;&gt;Post-release&lt;/h2&gt;

&lt;p&gt;A few things didn’t make it into this release, but I’ll be putting them into minor version releases over the next few weeks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Normal mapping&lt;/li&gt;
  &lt;li&gt;Oculus Rift&lt;/li&gt;
  &lt;li&gt;Tutorials on all this stuff!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anything I missed? Add a comment at the bottom of this page and I’ll fix it up.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs4-release&quot;&gt;SceneJS v4.0 Released&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on September 26, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Reflective Surfaces in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-reflection" />
  <id>http://xeolabs.com/articles/scenejs-reflection</id>
  <updated>2014-07-24T00:00:00-00:00</updated>
  <published>2014-07-24T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#making-objects-reflective&quot; id=&quot;markdown-toc-making-objects-reflective&quot;&gt;Making objects reflective&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reflection-map-intensity&quot; id=&quot;markdown-toc-reflection-map-intensity&quot;&gt;Reflection map intensity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#material-specularity&quot; id=&quot;markdown-toc-material-specularity&quot;&gt;Material specularity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#varying-reflectivity-across-a-surface&quot; id=&quot;markdown-toc-varying-reflectivity-across-a-surface&quot;&gt;Varying reflectivity across a surface&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#switching-reflection-on-and-off&quot; id=&quot;markdown-toc-switching-reflection-on-and-off&quot;&gt;Switching reflection on and off&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#multiple-reflections&quot; id=&quot;markdown-toc-multiple-reflections&quot;&gt;Multiple reflections&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reflections-on-textured-objects&quot; id=&quot;markdown-toc-reflections-on-textured-objects&quot;&gt;Reflections on textured objects:&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;strong&gt;Reflection mapping&lt;/strong&gt; or &lt;strong&gt;environment mapping&lt;/strong&gt; is an efficient image-based lighting technique (introduced in &lt;a href=&quot;/articles/scenejs4-release&quot;&gt;SceneJS v4.0&lt;/a&gt;) for approximating the
appearance of a reflective surface by means of a precomputed texture image.
The texture image contains a view of the distant environment surrounding the rendered objects, and is projected onto the six
faces of a cube, which we can imagine as surrounding our objects. For each point on the objects, SceneJS will then
determine the colour by calculating the reflection vector at that point and mapping it to the texel in the environment map.
&lt;br /&gt;&lt;br /&gt;
In this tutorial I’ll show you how to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make objects reflective,&lt;/li&gt;
  &lt;li&gt;control surface reflectivity&lt;/li&gt;
  &lt;li&gt;vary reflectivity across a surface using a &lt;strong&gt;specular control map&lt;/strong&gt;,&lt;/li&gt;
  &lt;li&gt;control reflection map intensity,&lt;/li&gt;
  &lt;li&gt;switch reflection on and off for objects, selectively, and&lt;/li&gt;
  &lt;li&gt;layer multiple reflections onto the same objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;making-objects-reflective&quot;&gt;Making objects reflective&lt;/h2&gt;

&lt;p&gt;As usual, we’ll point SceneJS at where you keep your plugins:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;pluginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./plugins&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll create a scene containing the reflective teapot shown below. The teapot is wrapped in a &lt;code&gt;reflect&lt;/code&gt; node, which defines
our environment cube map.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=cubeMap&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection.jpg&quot; alt=&quot;Reflection Example 1&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=cubeMap&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The reflection cube map&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Images taken from: http://hristo.oskov.com/projects/cs418/mp3/&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/pos-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// +X axis&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/neg-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// -X axis&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/pos-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// +Y axis&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/neg-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// -Y axis&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/pos-z.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// +Z axis&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/reflection/london/neg-z.png&quot;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// -Z axis&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// 100% texture intensity (default)&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;intensity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Specular material&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

          &lt;span class=&quot;c1&quot;&gt;// Mirror-like reflection when specular == 1.0&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// No reflection at all when specular == 0.0&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;specular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

          &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Teapot primitive implemented by plugin at&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/geometry/teapot.js&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;geometry/teapot&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These are the images we’re using for each face of our &lt;code&gt;reflect&lt;/code&gt; node’s cubemap:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/pos-x.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/neg-x.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/pos-y.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/neg-y.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/pos-z.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/london/neg-z.png&quot; alt=&quot;&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pos-x.png&lt;/td&gt;
      &lt;td&gt;neg-x.png&lt;/td&gt;
      &lt;td&gt;pos-y.png&lt;/td&gt;
      &lt;td&gt;neg-y.png&lt;/td&gt;
      &lt;td&gt;pos-z.png&lt;/td&gt;
      &lt;td&gt;neg-z.png&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The amount of environment that’s actually reflected by the teapot is the product of the &lt;code&gt;intensity&lt;/code&gt; property on
the &lt;code&gt;reflect&lt;/code&gt; node multiplied by the &lt;code&gt;specular&lt;/code&gt; property on the &lt;code&gt;material&lt;/code&gt; node. When that product is 0, then
the surface will reflect none of the environment, and when its 1.0, the surface will have mirror-like reflectivity. One
thing to note in the example above is that the product is &lt;code&gt;0.8&lt;/code&gt;, which allows some of the yellow material &lt;code&gt;color&lt;/code&gt; to
show through, creating a gold-like surface.
&lt;br /&gt;&lt;br /&gt;
The &lt;code&gt;specular&lt;/code&gt; property on the &lt;code&gt;material&lt;/code&gt; node also controls the amount of specular light reflected by the
surface from &lt;code&gt;light&lt;/code&gt; light nodes. This allows you to have a shiny object with a dull reflection, by specifying a
low value for &lt;code&gt;intensity&lt;/code&gt; and a high value for &lt;code&gt;specular&lt;/code&gt;.
&lt;br /&gt;&lt;br /&gt;
The geometry must have normal vectors, but does not require UV coordinates. The &lt;code&gt;reflect&lt;/code&gt; node is designed so that you
can just slap it around some portion your scene graph and all the geometries within that will magically get reflective
surfaces, just as long as those geometries have normal vectors and &lt;code&gt;material&lt;/code&gt; nodes with non-zero &lt;code&gt;specular&lt;/code&gt; factors.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reflection-map-intensity&quot;&gt;Reflection map intensity&lt;/h2&gt;

&lt;p&gt;Let’s look at the effect of varying &lt;code&gt;reflect&lt;/code&gt; node &lt;code&gt;intensity&lt;/code&gt; while keeping &lt;code&gt;material&lt;/code&gt; node &lt;code&gt;specular&lt;/code&gt; fixed.
The example below contain four objects, each wrapped with a &lt;code&gt;reflect&lt;/code&gt; node with a different &lt;code&gt;intensity&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionIntensity&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflectionIntensity.jpg&quot; alt=&quot;Reflection Example 1&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionIntensity&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From left to right, the &lt;code&gt;intensity&lt;/code&gt; factors are 1.0, 0.4, 0.2 and 0.05, respectively.&lt;/li&gt;
  &lt;li&gt;Note how all the tanks have different amounts of relection, but the same amount of specularity.&lt;/li&gt;
  &lt;li&gt;Click &lt;em&gt;Source code&lt;/em&gt; on the example for source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;material-specularity&quot;&gt;Material specularity&lt;/h2&gt;

&lt;p&gt;Now let’s look at the effect of varying &lt;code&gt;material&lt;/code&gt; node &lt;code&gt;specular&lt;/code&gt; while keeping &lt;code&gt;reflect&lt;/code&gt; node &lt;code&gt;intensity&lt;/code&gt; fixed.
The example below shows three boxes that share the same &lt;code&gt;reflect&lt;/code&gt;, but each have their own &lt;code&gt;material&lt;/code&gt; node with a unique &lt;code&gt;specular&lt;/code&gt; factor.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithVaryingSpecularity&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/surfaceReflectivity.jpg&quot; alt=&quot;Reflection Example 1&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithVaryingSpecularity&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;From left to right, the &lt;code&gt;specular&lt;/code&gt; factors are 1.0, 0.5 and 0.0, respectively.&lt;/li&gt;
  &lt;li&gt;See how the specularity varies, along with the amount of reflection.&lt;/li&gt;
  &lt;li&gt;Click &lt;em&gt;Source code&lt;/em&gt; on the example for source code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;varying-reflectivity-across-a-surface&quot;&gt;Varying reflectivity across a surface&lt;/h2&gt;

&lt;p&gt;Often we want to control reflectivity across a surface using a control texture. In SceneJS, a &lt;strong&gt;specular map&lt;/strong&gt; is a texture
that is applied to the &lt;code&gt;specular&lt;/code&gt; property of a geometry’s &lt;code&gt;material&lt;/code&gt;, to vary the
amount of specular reflection across the geometry surface. The amount of specular reflection at each fragment on the
  surface is multiplied by the value of the &lt;em&gt;red&lt;/em&gt; channel of the corresponding pixel in the texture image. We can also use
  a greyscale image for these textures, where only the red channel will be actually be used.
  &lt;br /&gt;&lt;br /&gt;
  As mentioned earlier, when &lt;code&gt;reflect&lt;/code&gt; nodes are involved, the &lt;code&gt;material&lt;/code&gt; node’s &lt;code&gt;specular&lt;/code&gt; factor contributes to the degree of surface
  reflectivity, so texturing that factor with a map will vary the reflectivity across the surface.
  &lt;br /&gt;&lt;br /&gt;
  The demo below shows three boxes with specular map textures, where each texture image has an increasing darkness of the
  diamond shapes it contains.
  &lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithControlMap&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflectionControlMap.jpg&quot; alt=&quot;Reflection Example 2&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithControlMap&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Note how as the diamonds get darker, the value of the &lt;strong&gt;red&lt;/strong&gt; channel in the pixels will be lower. Therefore, the specularity
at the corresponding surface fragment will be lower after multiplying by it, so the reflectivity at that point will be lower also.&lt;/li&gt;
  &lt;li&gt;Since the &lt;code&gt;material&lt;/code&gt; node’s &lt;code&gt;color&lt;/code&gt; property is light blue, as the reflectivity decreases, the blue color begins to contribute
more to the surface color, while the &lt;code&gt;reflect&lt;/code&gt; node’s texture contributes less.&lt;/li&gt;
  &lt;li&gt;See &lt;a href=&quot;http://scenejs.org/examples.html?page=specularMap&quot;&gt;this example&lt;/a&gt; for a basic example of how specular maps are normally done in SceneJS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shown below are the images we’re using for the specular control maps for each box:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/reflectionSpecularMap1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/reflectionSpecularMap2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection/reflectionSpecularMap3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;switching-reflection-on-and-off&quot;&gt;Switching reflection on and off&lt;/h2&gt;

&lt;p&gt;Usually you’ll want to apply reflection only to certain objects in your scene. Do that with a &lt;code&gt;reflection&lt;/code&gt; flag
on a &lt;code&gt;flags&lt;/code&gt; node, as shown in the example below:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionFlag&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflection.jpg&quot; alt=&quot;Reflection Example 3&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionFlag&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
   &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

     &lt;span class=&quot;c1&quot;&gt;// Mouse-orbited camera, implemented by plugin at&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/cameras/orbit.js&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cameras/orbit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;zoomSensitivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

         &lt;span class=&quot;c1&quot;&gt;// Flags node which enables or disables reflection on our teapot&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;myFlags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;reflection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (default is true)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

           &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

             &lt;span class=&quot;c1&quot;&gt;// The reflection cube map&lt;/span&gt;
             &lt;span class=&quot;c1&quot;&gt;// Images taken from: http://hristo.oskov.com/projects/cs418/mp3/&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/pos-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/neg-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/pos-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/neg-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/pos-z.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;s2&quot;&gt;&quot;../../textures/reflection/london/neg-z.png&quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;

               &lt;span class=&quot;c1&quot;&gt;// 100% texture intensity&lt;/span&gt;
               &lt;span class=&quot;na&quot;&gt;intensity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

               &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                 &lt;span class=&quot;c1&quot;&gt;// Specular material&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                     &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                     &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                   &lt;span class=&quot;c1&quot;&gt;// Mirror-like reflection when specular == 1.0&lt;/span&gt;
                   &lt;span class=&quot;c1&quot;&gt;// No reflection at all when specular == 0.0&lt;/span&gt;
                   &lt;span class=&quot;na&quot;&gt;specular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                   &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                     &lt;span class=&quot;c1&quot;&gt;// Teapot primitive implemented by plugin at&lt;/span&gt;
                     &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/geometry/teapot.js&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                       &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;geometry/teapot&quot;&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we can toggle reflectivity on and off for the teapot:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myFlags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTransparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;geometry/teapot&lt;/code&gt; in our scene “inherits” the &lt;code&gt;flags&lt;/code&gt; node, where the &lt;code&gt;flags&lt;/code&gt; can be anywhere on the path from
 the &lt;code&gt;geometry/teapot&lt;/code&gt; up to the scene root. Only the first &lt;code&gt;flags&lt;/code&gt; on the path up to the root will be applied, overriding
any other higher &lt;code&gt;flags&lt;/code&gt; for the &lt;code&gt;geometry/teapot&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;By default, the &lt;code&gt;flags&lt;/code&gt; node &lt;code&gt;reflection&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiple-reflections&quot;&gt;Multiple reflections&lt;/h2&gt;

&lt;p&gt;Like &lt;code&gt;texture&lt;/code&gt; nodes, multiple reflections can be layered onto the same object, as shown in the example below:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples/index.html#reflections_multipleCombined&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflectionLayered.jpg&quot; alt=&quot;Reflection Example 4&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples/index.html#reflections_multipleCombined&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Orbiting camera node, implemented by plugin at&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/cameras/orbit.js&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cameras/orbit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;zoomSensitivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// London reflection&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// Images taken from: http://hristo.oskov.com/projects/cs418/mp3/&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/pos-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/neg-x.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/pos-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/neg-y.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/pos-z.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/london/neg-z.png&quot;&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;intensity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Cloudy sky reflection&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/a.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/b.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/top.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/bottom.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/c.png&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                &lt;span class=&quot;s2&quot;&gt;&quot;textures/reflection/clouds/d.png&quot;&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;intensity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                                &lt;span class=&quot;c1&quot;&gt;// Specular material&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                                    &lt;span class=&quot;c1&quot;&gt;// Mirror-like reflection when specular == 1.0&lt;/span&gt;
                                    &lt;span class=&quot;c1&quot;&gt;// No reflection at all when specular == 0.0&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;specular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;

                                        &lt;span class=&quot;c1&quot;&gt;// Teapot primitive implemented by plugin at&lt;/span&gt;
                                        &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/geometry/teapot.js&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;geometry/teapot&quot;&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Each of the nested &lt;code&gt;reflect&lt;/code&gt; nodes in our scene has the same value for &lt;code&gt;intensity&lt;/code&gt;, so they both contribute the same amount to the &lt;code&gt;teapot&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reflections-on-textured-objects&quot;&gt;Reflections on textured objects:&lt;/h2&gt;

&lt;p&gt;Finally, just to show how the &lt;code&gt;reflect&lt;/code&gt; node is designed so that you can slap around almost anything you already
have in your scene, let’s finish off with an example in which we’ve taken a raptor imported with an &lt;code&gt;import/obj&lt;/code&gt; node
and wrapped it with a &lt;code&gt;reflect&lt;/code&gt; to make it shiny:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithOBJImport&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/reflectionToOBJ.jpg&quot; alt=&quot;Reflection Example 3&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=reflectionWithOBJImport&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this tutorial I’ve shown you how to use the &lt;code&gt;reflect&lt;/code&gt; node to make geometry
   appear to reflect its environment. Reflections are designed so that you can wrap them around any subgraph to make objects
    with specular materials reflective, without modifying the contents of the subgraph. The amount of reflectivity is governed by the
    combination of the &lt;code&gt;reflect&lt;/code&gt; node’s &lt;code&gt;intensity&lt;/code&gt; property with the &lt;code&gt;specular&lt;/code&gt; property on the &lt;code&gt;material&lt;/code&gt; nodes around the
     geometries in the subgraph. You can vary the amount of reflection using the &lt;code&gt;reflect&lt;/code&gt; node’s &lt;code&gt;intensity&lt;/code&gt; property,
     which may avoid needing to adjust the &lt;code&gt;specular&lt;/code&gt; properties on those &lt;code&gt;material&lt;/code&gt; nodes.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-reflection&quot;&gt;Reflective Surfaces in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on July 24, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Transparency in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-transparency" />
  <id>http://xeolabs.com/articles/scenejs-transparency</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-11-03T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#switching-transparency-on-and-off&quot; id=&quot;markdown-toc-switching-transparency-on-and-off&quot;&gt;Switching transparency on and off&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#varying-opacity&quot; id=&quot;markdown-toc-varying-opacity&quot;&gt;Varying opacity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#picking-through-transparent-objects&quot; id=&quot;markdown-toc-picking-through-transparent-objects&quot;&gt;Picking through transparent objects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#transparency-sorting&quot; id=&quot;markdown-toc-transparency-sorting&quot;&gt;Transparency sorting&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#the-problem&quot; id=&quot;markdown-toc-the-problem&quot;&gt;The problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solutions-that-dont-work-so-well-in-webgl&quot; id=&quot;markdown-toc-solutions-that-dont-work-so-well-in-webgl&quot;&gt;Solutions that don’t work so well in WebGL&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#painters-algorithm-or-bsp-nope&quot; id=&quot;markdown-toc-painters-algorithm-or-bsp-nope&quot;&gt;Painter’s Algorithm or BSP? Nope.&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#depth-peeling-nope&quot; id=&quot;markdown-toc-depth-peeling-nope&quot;&gt;Depth peeling? Nope.&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#solution-ordered-render-bins&quot; id=&quot;markdown-toc-solution-ordered-render-bins&quot;&gt;Solution: Ordered render bins&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#changing-layer-priorities&quot; id=&quot;markdown-toc-changing-layer-priorities&quot;&gt;Changing layer priorities&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#whats-next&quot; id=&quot;markdown-toc-whats-next&quot;&gt;What’s next?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;In this tutorial I’ll show you how to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;make objects transparent,&lt;/li&gt;
  &lt;li&gt;switch transparency on and off&lt;/li&gt;
  &lt;li&gt;vary the opacity of transparent objects&lt;/li&gt;
  &lt;li&gt;pick through transparent objects, to pick objects behind them&lt;/li&gt;
  &lt;li&gt;depth-sort transparent objects for correct alpha-blending order&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you’ve read this tutorial, you might be interested to read about texturing your
transparency with &lt;a href=&quot;/articles/scenejs-alpha-mapping&quot;&gt;Alpha Maps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;#Making objects transparent&lt;/p&gt;

&lt;p&gt;As usual, we’ll point SceneJS at where you keep your plugins:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;pluginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./plugins&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll create the scene below, in which the outer blue box has a transparent material which allows you to see the teapot within it.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=basicTransparency&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/transparentObject.png&quot; alt=&quot;Basic transparency&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=basicTransparency&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;
The code for this example is shown below. Our outer blue box is wrapped with a &lt;code&gt;flags&lt;/code&gt; node, which works in conjunction with
a &lt;code&gt;material&lt;/code&gt; node to make it transparent.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set up a nice camera angle&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lookAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;eye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;look&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Opaque red teapot&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/teapot&quot;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Transparent blue box&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Flags node enables transparency for our box.&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// This enables the material `alpha` to specify&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// the degree of opacity.&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Material node&#39;s &#39;alpha&#39; property makes&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// teapot 60% transparent.&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;translate&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;xSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ySize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;zSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;transparent&lt;/code&gt; flag on the &lt;code&gt;flags&lt;/code&gt; node around the outer blue box which enables it to be transparent.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;material&lt;/code&gt; node around the blue box has an &lt;code&gt;alpha&lt;/code&gt; of &lt;code&gt;0.4&lt;/code&gt;, which works in conjuction with the &lt;code&gt;flags&lt;/code&gt; node to
make the box 60% transparent.&lt;/li&gt;
  &lt;li&gt;The box would be invisible if &lt;code&gt;alpha&lt;/code&gt; was 0.0, and opaque if &lt;code&gt;alpha&lt;/code&gt; was 1.0.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SceneJS automatically ensures that all transparent objects are rendered &lt;em&gt;after&lt;/em&gt; opaque objects. If the transparent box was
rendered before the teapot, then the teapot would not be visible because its fragments would have been rejected by the
WebGL &lt;a href=&quot;http://en.wikipedia.org/wiki/Z-buffering&quot;&gt;depth test&lt;/a&gt; because the pixels for the box would already be in the depth buffer,
with closer depth values. Graphics geeks will note that there may be a problem with depth buffer rejection if we have
multiple transparent objects. I’ll address that in the following section on Transparency Sorting.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;When designing SceneJS, I had considered just making the &lt;code&gt;transparent&lt;/code&gt; property on &lt;code&gt;flags&lt;/code&gt; nodes true by default.
That way, an &lt;code&gt;alpha&lt;/code&gt; value less than 1.0 would be sufficient to make the box transparent, no &lt;code&gt;flags&lt;/code&gt; node required. However,
   that doesn’t quite fit with alpha mapping (see tutorial on &lt;a href=&quot;/articles/scenejs-alpha-mapping&quot;&gt;Alpha Maps&lt;/a&gt;). We might have an &lt;code&gt;alpha&lt;/code&gt; of 1.0, then
   have an alpha map that modifies it for fragments within the shader, which fails to create transparency for those because SceneJS has already
   determined that the geometry is opaque. That’s one reason we have &lt;code&gt;flags&lt;/code&gt; in the mix, other being that we can use them
   to easily switch transparency on and off for chunks of our scenes.&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;switching-transparency-on-and-off&quot;&gt;Switching transparency on and off&lt;/h3&gt;
&lt;p&gt;You can make the box opaque by flipping the &lt;code&gt;transparent&lt;/code&gt; flag on that &lt;code&gt;flags&lt;/code&gt; node:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myFlags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTransparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;varying-opacity&quot;&gt;Varying opacity&lt;/h3&gt;
&lt;p&gt;You can make the box less transparent my increasing the &lt;code&gt;alpha&lt;/code&gt; on its &lt;code&gt;material&lt;/code&gt; node:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myMaterial&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;myMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myMaterial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAlpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;picking-through-transparent-objects&quot;&gt;Picking through transparent objects&lt;/h3&gt;
&lt;p&gt;Want to be able to pick the teapot through the box? That’s covered in the
tutorial on &lt;a href=&quot;/articles/scenejs-picking/#picking-through-transparent-objects&quot;&gt;Picking in SceneJS&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;transparency-sorting&quot;&gt;Transparency sorting&lt;/h1&gt;

&lt;p&gt;It’s tricky making multiple overlapping transparent objects look good in WebGL. In this section I’ll describe
the problem, some solutions that don’t work so well with WebGL, and a partial solution that SceneJS provides using
prioritised render bins.&lt;/p&gt;

&lt;h3 id=&quot;the-problem&quot;&gt;The problem&lt;/h3&gt;

&lt;p&gt;SceneJS renders transparent objects using the standard &lt;a href=&quot;http://en.wikipedia.org/wiki/Alpha_compositing&quot;&gt;alpha blending technique&lt;/a&gt;,
where it combines each transparent object’s translucent colour with the colours of the objects behind it.
&lt;br /&gt;&lt;br /&gt;
As mentioned earlier, there’s one catch: SceneJS may also be using the depth
buffer’s Z-test to solve visibility for overlapping objects, which works by ensuring that each pixel is written to the colour
buffer only if its Z-depth is closer than any pixel already at the same location.&lt;br /&gt;&lt;br /&gt;The example below shows the
problem. If we were to render the outer green box first, then when we try to render the inner yellow and blue boxes,
the pixels of those boxes will not be rendered, because their Z-depths are greater than the pixels already rendered for
the outer green box.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=transparencySorting&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/transparencySort.jpg&quot; alt=&quot;TransparencySort&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scenejs.org/examples.html?page=transparencySorting&quot;&gt;Run this example&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;
We therefore need to order the rendering of the boxes from the innermost box outwards, so that the
pixels of each box don’t get rejected by the depth test, and thus get the chance to be blended with each other in
the colour buffer - a technique called &lt;a href=&quot;http://www.opengl.org/wiki/Transparency_Sorting&quot;&gt;transparency sorting&lt;/a&gt;.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;solutions-that-dont-work-so-well-in-webgl&quot;&gt;Solutions that don’t work so well in WebGL&lt;/h3&gt;

&lt;p&gt;Algorithms to find that order automatically are simple enough, but not easy to do efficiently on WebGL.&lt;/p&gt;

&lt;h4 id=&quot;painters-algorithm-or-bsp-nope&quot;&gt;Painter’s Algorithm or BSP? Nope.&lt;/h4&gt;

&lt;p&gt;Ideally, I would have liked to use the &lt;a href=&quot;http://en.wikipedia.org/wiki/Painter&#39;s_algorithm&quot;&gt;painters algorithm&lt;/a&gt;, or a &lt;a href=&quot;http://en.wikipedia.org/wiki/Bsp_tree&quot;&gt;BSP tree&lt;/a&gt;,
which would render all the faces in the scene in order from furthest face first, through to closest face last.
 &lt;br /&gt;&lt;br /&gt;
Two show stoppers exist with that though:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In WebGL we don’t get that kind of granular access to individual faces. Rendering the faces of a mesh is a batch
 operation, where we bind the vertex arrays for the mesh, then do a draw call to render them in one hit.&lt;/li&gt;
  &lt;li&gt;If we &lt;strong&gt;were&lt;/strong&gt; able to draw each face individually (like we could back in the days of fixed-function OpenGL), then
  the constant switching of colours and textures for each face would make for some horrendously inefficient GPU state changes.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;depth-peeling-nope&quot;&gt;Depth peeling? Nope.&lt;/h4&gt;

&lt;p&gt;I had also considered &lt;a href=&quot;http://en.wikipedia.org/wiki/Depth_peeling&quot;&gt;depth peeling&lt;/a&gt;, which is essentially an order-independent
technique in which you render the scene multiple times, each time clipping the objects to a min-max layer, which you
 move forwards each time. Even though that’s awesome for solving our problem for nested objects, like our boxes, it requires multiple
 passes on the draw list for each frame. That would severely impact SceneJS’ efficiency at rendering large quantities
 of objects, which is a priority feature.
 &lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution-ordered-render-bins&quot;&gt;Solution: Ordered render bins&lt;/h2&gt;

&lt;p&gt;In the end I went for the lowest common denominator and simply allowed you to organise scene objects within &lt;code&gt;layer&lt;/code&gt; nodes.
 These work by manually partitioning the objects into prioritised render bins, ordered so that the objects within the
 &lt;code&gt;layer&lt;/code&gt; with the lowest priority are rendered first.&lt;br /&gt;&lt;br /&gt;Note that since the &lt;code&gt;layer&lt;/code&gt; node’s priorities can be
 dynamically reassigned, the way is also open to support some sort of automatic object Z-sorting later if needed.
&lt;br /&gt;&lt;br /&gt;
Let’s have a look at how we use the &lt;code&gt;layer&lt;/code&gt; nodes to render our boxes in the correct order for transparency.
&lt;br /&gt;&lt;br /&gt;
Here’s the scene that renders the nested boxes in the scene above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Mouse-orbited camera&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cameras/orbit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;zoomSensitivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Inner opaque blue box.&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Rendered first, within layer at priority -1.&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Box is opaque because material has default alpha of 1.0, and box&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// is not wrapped with a flags node with a &#39;transparent&#39; flag set.&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                                        &lt;span class=&quot;c1&quot;&gt;// Box primitive&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;


                &lt;span class=&quot;c1&quot;&gt;// Flags around our transparent boxes&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Enables to &#39;alpha&#39; values on the materials around&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// our boxes to to cause them to be translucent.&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Also cull backfaces on those boxes because we can&#39;t&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// control the order in which faces render. We don&#39;t want&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// front faces rendering before back faces, which would&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// cause the back faces to be rejected by the depth buffer&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// and deny the opportunity&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// to blend the faces - easy fix is just to not render the backfaces.&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;backfaces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Middle transparent red box&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Rendered next, in implicit layer at priority 0&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// We don&#39;t actually need this layer because anything&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// not within a Anything not in a layer is actually&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// at priority 0 implicitly.&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// This box is transparent because its wrapped with a&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// material having an alpha channel that&#39;s less than&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// 1.0, which works with the &#39;transparent&#39; flag.&lt;/span&gt;

                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Outer transparent green cube&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Rendered last, within layer with priority 1&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// This box is also transparent because its wrapped&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// with a material having an alpha channel that&#39;s&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// less than 1.0, which works with the&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// &#39;transparent&#39; flag.&lt;/span&gt;

                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;priority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;greenBoxLayer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

                                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The boxes are wrapped with &lt;code&gt;layer&lt;/code&gt; nodes, with &lt;code&gt;priority&lt;/code&gt; properties set to order their rendering so that the
innermost box renders first&lt;/li&gt;
  &lt;li&gt;Anything not within a &lt;code&gt;layer&lt;/code&gt; node is implicitly at priority 0. The &lt;code&gt;layer&lt;/code&gt; around the middle box is therefore
 actually redundant.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;changing-layer-priorities&quot;&gt;Changing layer priorities&lt;/h3&gt;
&lt;p&gt;You can change the &lt;code&gt;priority&lt;/code&gt; on the &lt;code&gt;layer&lt;/code&gt; nodes at any time. Let’s change the priority for the green box:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;greenBoxLayer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPriority&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s going to make the green outermost box render before the innermost blue box, which is actually going to wreck our
 transparency sorting.
 &lt;br /&gt;&lt;br /&gt;
&lt;strong&gt;Performance tip&lt;/strong&gt;: changing those priorities causes SceneJS to re-sort its internal display list, so there will be a
performance hit if you do that frequently.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this tutorial I’ve shown you how to use the &lt;code&gt;material&lt;/code&gt; node in conjunction with &lt;code&gt;flags&lt;/code&gt; nodes to make geometry
   appear transparent. I also touched on the classic problem of making multiple overlapping transparent objects look good,
    and described the partial solutuion provided by SceneJS through its &lt;code&gt;layer&lt;/code&gt; nodes, which order the rendering of geometries
     so that they alpha-blend nicely with one another.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Learn how to texture your transparency using &lt;a href=&quot;/articles/scenejs-alpha-mapping&quot;&gt;Alpha Maps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-transparency&quot;&gt;Transparency in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on November 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Alpha Mapping in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-alpha-mapping" />
  <id>http://xeolabs.com/articles/scenejs-alpha-mapping</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-11-03T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#texture-blend-mode&quot; id=&quot;markdown-toc-texture-blend-mode&quot;&gt;Texture blend mode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot; id=&quot;markdown-toc-conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;Alpha mapping is a technique where an image is mapped to a 3D object to designate certain areas of the object to be transparent or translucent.
&lt;br /&gt;&lt;br /&gt;
In this tutorial, I’ll build on techniques from the &lt;a href=&quot;/articles/scenejs-transparency&quot;&gt;Transparency&lt;/a&gt; tutorial to show you how to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apply a texture to an object make holes in it&lt;/li&gt;
  &lt;li&gt;apply a video texture to make animated areas of transparency
&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;#Basic alpha map&lt;/p&gt;

&lt;p&gt;As usual, we’ll point SceneJS at where you keep your plugins:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
     &lt;span class=&quot;na&quot;&gt;pluginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./plugins&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we’ll create the scene below, in which the outer green box has an alpha texture which creates transparent areas through
which you can see the inner blue box.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=alphaMap&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/basicAlphaMap.png&quot; alt=&quot;Alpha map&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=alphaMap&quot;&gt;Run this demo&lt;/a&gt;
&lt;br /&gt;&lt;br /&gt;Shown below is the texture we’ll use for the alpha map. The white areas will be where the outer box will be opaque,
while the black areas are where it will be transparent.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://xeolabs.com/images/scenejs/leavesAlphaMap.jpg&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/leavesAlphaMapSmall.jpg&quot; alt=&quot;Alpha map image&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;Listed below is the code that defines our scene. It’s using &lt;code&gt;flags&lt;/code&gt; and &lt;code&gt;material&lt;/code&gt; nodes to set up
transparency (which you learned about in the &lt;a href=&quot;/articles/scenejs-transparency&quot;&gt;Transparency&lt;/a&gt; tutorial), plus a &lt;code&gt;texture&lt;/code&gt; node, which
  varies the transparency across the surface of the outer green box.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Orbiting camera node, implemented by plugin at&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// http://scenejs.org/api/latest/plugins/node/cameras/orbit.js&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cameras/orbit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;yaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;pitch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;zoomSensitivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Outer green box with alpha map&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Flags node enables transparency for the box.&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// This enables the material `alpha` to specify&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// the degree of opacity.&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;flags&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;transparent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;// Material node&#39;s &#39;alpha&#39; property makes&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// the pixels of the box opaque by default.&lt;/span&gt;

                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                                &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;

                                &lt;span class=&quot;c1&quot;&gt;// The alpha map is a texture that&#39;s&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// applied to the alpha channel of the&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// material, to vary it according to&lt;/span&gt;
                                &lt;span class=&quot;c1&quot;&gt;// the intensity of each texture pixel.&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;texture&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../../textures/leavesAlphaMap.jpg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;blendMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Default&lt;/span&gt;

                                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// Inner blue box&lt;/span&gt;

                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;material&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:{&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;na&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;geometry/box&quot;&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;code&gt;transparent&lt;/code&gt; flag on that &lt;code&gt;flags&lt;/code&gt; node enables transparent rendering of the outer green box.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;material&lt;/code&gt; node around the outer green box has an &lt;code&gt;alpha&lt;/code&gt; property, which is set to &lt;code&gt;1.0&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;An &lt;code&gt;alpha&lt;/code&gt; value of 0.0 is completely transparent, while 1.0 is completely opaque.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;texture&lt;/code&gt; node applies a texture to the outer box.&lt;/li&gt;
  &lt;li&gt;The &lt;code&gt;texture&lt;/code&gt; node’s &lt;code&gt;applyTo&lt;/code&gt; property causes the image to be applied to the &lt;code&gt;material&lt;/code&gt; node’s &lt;code&gt;alpha&lt;/code&gt; property,
effectively modulating the alpha across the box’s surface.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;texture-blend-mode&quot;&gt;Texture blend mode&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;blendMode&lt;/code&gt; on our texture has the value &lt;code&gt;multiply&lt;/code&gt;, which causes it to multiply the colour of each image pixel
with the material alpha value, causing the material alpha to be 0.0 where the pixels are black, and 1.0 where the pixels are white.
&lt;br /&gt;&lt;br /&gt;
The other supported value for that property is &lt;code&gt;add&lt;/code&gt;, which adds the value of each image pixel to the alpha. To
achieve the same effect as shown in this example, you would then need an &lt;code&gt;alpha&lt;/code&gt; of 0.0 on the &lt;code&gt;material&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;#Video alpha map&lt;/p&gt;

&lt;p&gt;Now I’ll show you how to apply a video as an alpha map. This time, we’ll dynamically sample our texture from &lt;a href=&quot;http://xeolabs.com/images/scenejs/testVideo.ogv&quot;&gt;an .OGV file&lt;/a&gt;, to
create a cool flowing gas pattern across the surface of the outer box.
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=videoAlphaMap&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/videoAlphaMap.jpg&quot; alt=&quot;Alpha video map&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=videoAlphaMap&quot;&gt;Run this demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;The code is identical to the previous example, except for the &lt;code&gt;texture&lt;/code&gt; node, which looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;texture/video&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;../../../movies/testVideo.ogv&quot;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;applyTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alpha&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re using a &lt;a href=&quot;http://scenejs.org/api/latest/plugins/node/texture/video.js&quot;&gt;&lt;code&gt;texture/video&lt;/code&gt;&lt;/a&gt; node, which streams the video file into the texture&lt;/li&gt;
  &lt;li&gt;Each of the video’s frames is a grayscale image, applied using the same principles as used for regular image textures
&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this tutorial I showed you how to use the &lt;code&gt;texture&lt;/code&gt; node, in conjunction with transparency techniques I described
in the &lt;a href=&quot;/articles/scenejs-transparency&quot;&gt;Transparency&lt;/a&gt; tutorial, to make holes in things. I also showed you how it’s easy
 to use a video, instead of the usual image, in order to make animated regions of transparancy.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-alpha-mapping&quot;&gt;Alpha Mapping in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on November 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Automatic WebGLContestLost Recovery in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-webgl-context-lost" />
  <id>http://xeolabs.com/articles/scenejs-webgl-context-lost</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-10-28T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#so-whats-webglcontextlost&quot; id=&quot;markdown-toc-so-whats-webglcontextlost&quot;&gt;So, what’s WebGLContextLost?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;a href=&quot;http://scenejs.org&quot;&gt;SceneJS&lt;/a&gt; can automatically recover from lost WebGL context without disruption to your scene state, and
more importantly, without needing to reload anything.&lt;br /&gt;&lt;br /&gt;
SceneJS was the first to do this, but pretty soon this will be a standard feature of all retained-mode
WebGL frameworks.
&lt;br /&gt;&lt;br /&gt;
Check out the example below, in which we blow the context away every five seconds while you orbit the rising bubbles using the mouse:
&lt;br /&gt;&lt;br /&gt;
&lt;a href=&quot;http://scenejs.org/examples.html?page=webglContextLost&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/webglContextLost.jpg&quot; alt=&quot;SceneJS First Example&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://scenejs.org/examples.html?page=webglContextLost&quot;&gt;Run this example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-webglcontextlost&quot;&gt;So, what’s WebGLContextLost?&lt;/h2&gt;

&lt;p&gt;It’s the devil.
&lt;br /&gt;&lt;br /&gt;
The GPU is a shared resource, and there are times when it might be taken away from our WebGL applications, such as when
there are too many applications holding them, or when another application does something that ties up the GPU too
long.
&lt;br /&gt;&lt;br /&gt;
In such cases the operating system or browser may decide to reset the GPU to regain control. There’s
a &lt;a href=&quot;http://www.khronos.org/webgl/wiki/HandlingContextLost&quot;&gt;nice tutorial&lt;/a&gt; over at Khronos.org that describes how to handle
this in our applications. It describes how application processes such as asset loads can be disrupted by context loss, and
how an app will then need to reallocate its textures, VBOs, shaders etc. on a new context afterwards.
&lt;br /&gt;&lt;br /&gt;
SceneJS retains all state and assets, such as matrices, geoemtry and textures etc in its scene graph. Then when the context
is recovered after loss, it simply reallocates those assets on the new context.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-webgl-context-lost&quot;&gt;Automatic WebGLContestLost Recovery in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on October 28, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Fast Ray Picking in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-ray-picking" />
  <id>http://xeolabs.com/articles/scenejs-ray-picking</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-10-28T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#usage&quot; id=&quot;markdown-toc-usage&quot;&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;SceneJS ray-picking lets you pick a point on the canves and get the precise 3D World-space coordinates of whatever that
intersects within the 3D view.
&lt;br /&gt;&lt;br /&gt;
It’s very fast, even for really large numbers of objects. While it uses the standard &lt;a href=&quot;http://antongerdelan.net/opengl/colourpicking.html&quot;&gt;colour coding approach&lt;/a&gt; to find the picked
object, it also uses the depth buffer to help it find the 3D intersection coordinates, thus managing to avoid expensive
ray-intersect computations. If you’re curious how it works, I did &lt;a href=&quot;/articles/scenejs-ray-picking-technique&quot;&gt;a writeup on the technique here&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;a href=&quot;http://scenejs.org/examples.html?page=rayPicking&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/rayPicking.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://scenejs.org/examples/pages/demos/pickFlyOrbitCity.html&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/pickFlyOrbitCity.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
      &lt;th&gt;&lt;a href=&quot;http://scenejs.org/examples/pages/demos/pickFlyOrbitTerrain.html&quot;&gt;&lt;img src=&quot;http://xeolabs.com/images/scenejs/pickFlyOrbitTerrain.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples.html?page=rayPicking&quot;&gt;Ray pick performance demo&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/pages/demos/pickFlyOrbitCity.html&quot;&gt;Pick-fly-orbit demo #1&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://scenejs.org/examples/pages/demos/pickFlyOrbitTerrain.html&quot;&gt;Pick-fly-orbit demo #2&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;I’ll assume that you know all about &lt;a href=&quot;http://xeolabs.com/articles/scenejs-picking&quot;&gt;basic 2D picking&lt;/a&gt; in SceneJS. Ray picking
is done in pretty much the same way, except that you supply an additional &lt;code&gt;rayPick&lt;/code&gt; flag when you do the pick, and get
back an additional &lt;code&gt;worldPos&lt;/code&gt; property in the result, which gives you the intersection coordinates:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Register a pick handler&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pick&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// The &#39;name&#39; property on the first name node on the path&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// from the picked teapot up to the scene root, eg &quot;blueTeapot&quot;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Name path, a &#39;.&#39; delimited concatenation of the &#39;name&#39; properties&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// of all name nodes on the path down from teh scene root to the&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// picked teapot.&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Two-element array containing the X,Y canvas coordinates at which we picked&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvasPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;canvasPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Three-element array containing the X,Y,Z World-space coordinates at which we picked&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;worldPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s the ray-pick call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rayPick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Note the rayPick flag&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;


  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-ray-picking&quot;&gt;Fast Ray Picking in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on October 28, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Pssst...How Fast Ray Picking Works in SceneJS]]></title>
  <link rel="alternate" type="text/html" href="http://xeolabs.com/articles/scenejs-ray-picking-technique" />
  <id>http://xeolabs.com/articles/scenejs-ray-picking-technique</id>
  <updated>2013-05-31T00:00:00-00:00</updated>
  <published>2013-10-28T00:00:00+00:00</published>
  
  <author>
    <name>xeolabs</name>
    <uri>http://xeolabs.com</uri>
    <email>lindsay.kay@xeolabs.com</email>
  </author>
  <content type="html">&lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;Contents&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#the-technique&quot; id=&quot;markdown-toc-the-technique&quot;&gt;The technique&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#packing-clip-space-z-in-glsl&quot; id=&quot;markdown-toc-packing-clip-space-z-in-glsl&quot;&gt;Packing clip-space Z in GLSL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#unpacking-clip-space-z-in-javascript&quot; id=&quot;markdown-toc-unpacking-clip-space-z-in-javascript&quot;&gt;Unpacking clip-space Z in JavaScript&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#calculating-clip-space-z-in-the-fragment-shader&quot; id=&quot;markdown-toc-calculating-clip-space-z-in-the-fragment-shader&quot;&gt;Calculating clip-space Z in the fragment shader&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#drawbacks-to-this-technique&quot; id=&quot;markdown-toc-drawbacks-to-this-technique&quot;&gt;Drawbacks to this technique&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;Normally a ray-pick is done with expensive computations to find intersections of rays with meshes and so forth.
SceneJS, however, uses a fast GPU-assisted technique that employs the colour buffer to help find the ray-intersection point, which
 avoids those sorts of computations altogether.
 &lt;br /&gt;&lt;br /&gt;
I couldn’t find anybody else doing this in WebGL or OpenGL ES (maybe I should have looked harder?), so at first I thought
it must be too good to be true. However, despite a small amount of numeric inaccuracy when the front and back clip planes
are far apart, it seems work well enough, so I went with it.&lt;/p&gt;

&lt;h2 id=&quot;the-technique&quot;&gt;The technique&lt;/h2&gt;
&lt;p&gt;I’ll assume that you’ve read about &lt;a href=&quot;http://xeolabs.com/articles/scenejs-picking&quot;&gt;2D picking&lt;/a&gt;
and &lt;a href=&quot;http://xeolabs.com/articles/scenejs-ray-picking&quot;&gt;ray picking&lt;/a&gt;, which describe how you can wrap your objects with &lt;code&gt;name&lt;/code&gt;
nodes to assign them logical pick names.
&lt;br /&gt;&lt;br /&gt;
The steps of my technique are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User ray-picks canvas at coordinates (X, Y).&lt;/li&gt;
  &lt;li&gt;Do a render pass to a hidden frame buffer, in which the objects within each &lt;code&gt;name&lt;/code&gt; are rendered in a colour that
uniquely maps to that &lt;code&gt;name&lt;/code&gt;’s value.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates, map the colour back to the name value. Now we have the pick name.&lt;/li&gt;
  &lt;li&gt;Do a second render pass to another hidden frame buffer, this time rendering just the picked geometry, with each pixel
colour being the clip-space Z-value packed into an RGBA value.&lt;/li&gt;
  &lt;li&gt;Read the colour from the framebuffer at the canvas coordinates and unpack it to the clip-space Z value. Now we have the
clip-space Z, which will be in the range of [0..1], with near clip plane at 0 and far clip plane at 1.&lt;/li&gt;
  &lt;li&gt;Transform the canvas coordinates to clip-space. Make a ray from clip space (X,Y,0) to (X,Y,1) and transform that ray
into world-space by the inverse view and projection matrices.&lt;/li&gt;
  &lt;li&gt;Linearly interpolate along ray by the value of our clip-space Z, to find the world-space coordinate (X,Y,Z).&lt;/li&gt;
  &lt;li&gt;Voila, we have the picked name, canvas (X,Y) and world-space (X,Y,Z) for the pick hit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;packing-clip-space-z-in-glsl&quot;&gt;Packing clip-space Z in GLSL&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-glsl&quot; data-lang=&quot;glsl&quot;&gt;&lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;packDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitShift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitMask&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;vec4&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xxyz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitMask&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;unpacking-clip-space-z-in-javascript&quot;&gt;Unpacking clip-space Z in JavaScript&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;unpackDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depthZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;depthZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;depthZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;depthZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;depthZ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bitShift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;256.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SceneJS_math_dotVector4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bitShift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;calculating-clip-space-z-in-the-fragment-shader&quot;&gt;Calculating clip-space Z in the fragment shader&lt;/h4&gt;
&lt;p&gt;Step (4) requires that we have the view-space position in the fragment shader, which we pass through from the vertex shader. It also requires us to feed the locations of the near and far clipping planes into the fragment shader (which we take from the scene’s camera node). Using these, we calculate the clip-space depth like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-glsl&quot; data-lang=&quot;glsl&quot;&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uZNear&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vViewVertex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uZFar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uZNear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;gl_FragColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packDepth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;SceneJS internally caches the hidden frame buffers to avoid re-rendering them. This means that when we do a subsequent pick, as long as a re-render is not neccessary after objects have moved or changed appearance, we just re-read the buffers without repeating any rendering passes.&lt;/li&gt;
  &lt;li&gt;For picking, many WebGL frameworks will save time by doing a picking render of only a 1x1 viewport at the canvas coordinates. SceneJS renders the entire view for picking so that it can cache the pick framebuffers as just mentioned. This is an optimisation geared towards fast mouse-over picking effects in model viewing apps, such as highlighting and tooltips.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;drawbacks-to-this-technique&quot;&gt;Drawbacks to this technique&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The technique described here trades accuracy for speed. Packing and unpacking the clip-space Z to and from a colour value is lossy. Hopefully in future it will be possible to instead read the WebGL depth buffer, which will preserve much more precision.&lt;/li&gt;
  &lt;li&gt;Another limitation is that this technique does not find any topological information on the pick hit: it only finds the name and a world-space coordinate. When picking a mesh for example, it does not report the actual face that was picked.&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;http://xeolabs.com/articles/scenejs-ray-picking-technique&quot;&gt;Pssst...How Fast Ray Picking Works in SceneJS&lt;/a&gt; was originally published by xeolabs at &lt;a href=&quot;http://xeolabs.com&quot;&gt;xeolabs&lt;/a&gt; on October 28, 2013.&lt;/p&gt;</content>
</entry>

</feed>